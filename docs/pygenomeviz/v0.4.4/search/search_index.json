{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"pyGenomeViz","text":""},{"location":"#overview","title":"Overview","text":"<p>pyGenomeViz is a genome visualization python package for comparative genomics implemented based on matplotlib. This package is developed for the purpose of easily and beautifully plotting genomic features and sequence similarity comparison links between multiple genomes. It supports genome visualization of Genbank/GFF format file and can be saved figure in various formats (JPG/PNG/SVG/PDF/HTML). User can use pyGenomeViz for interactive genome visualization figure plotting on jupyter notebook, or automatic genome visualization figure plotting in genome analysis scripts/pipelines.</p> <p> </p> pyGenomeViz example plot gallery <p> </p>      Interactive HTML Viewer (Demo Page)    <p> GUI (Web Application) functionality is newly added from v0.4.0</p> <p> </p>      pyGenomeViz web application example (Demo Page)"},{"location":"#installation","title":"Installation","text":"<p><code>Python 3.8 or later</code> is required for installation.</p> <p>Install PyPI package:</p> <pre><code>pip install pygenomeviz\n</code></pre> <p>Install bioconda package:</p> <pre><code>conda install -c conda-forge -c bioconda pygenomeviz\n</code></pre> <p>Use Docker (Image Registry):</p> <p>Case1. Run CLI Workflow:</p> <pre><code>docker run -it --rm ghcr.io/moshi4/pygenomeviz:latest pgv-mummer -h\n</code></pre> <p>Case2. Launch GUI (Web Application):</p> <pre><code>docker run -it --rm -p 8501:8501 ghcr.io/moshi4/pygenomeviz:latest pgv-gui\n</code></pre>"},{"location":"getting_started/","title":"Getting Started","text":"In\u00a0[1]: Copied! <pre># %pip install pygenomeviz\n</pre> # %pip install pygenomeviz  In\u00a0[2]: Copied! <pre>from pygenomeviz import GenomeViz\n\ngv = GenomeViz()\ntrack = gv.add_feature_track(name=\"tutorial\", size=1000)\n\nfig = gv.plotfig()  # or gv.savefig(\"test.png\") or gv.savefig_html(\"test.html\")\n</pre> from pygenomeviz import GenomeViz  gv = GenomeViz() track = gv.add_feature_track(name=\"tutorial\", size=1000)  fig = gv.plotfig()  # or gv.savefig(\"test.png\") or gv.savefig_html(\"test.html\") In\u00a0[3]: Copied! <pre>from pygenomeviz import GenomeViz\n\ngv = GenomeViz(tick_style=\"axis\")\ntrack = gv.add_feature_track(name=\"tutorial\", size=1000)\n\ntrack.add_feature(start=50, end=150, strand=1, label=\"bigarrow\")\ntrack.add_feature(start=200, end=300, strand=-1, plotstyle=\"arrow\", label=\"arrow\", linewidth=1)\ntrack.add_feature(start=330, end=400, strand=1, plotstyle=\"bigbox\", label=\"bigbox\", labelrotation=0, labelha=\"center\")\ntrack.add_feature(start=420, end=500, strand=1, plotstyle=\"box\", label=\"box\", labelcolor=\"blue\", labelsize=10, facecolor=\"red\", )\ntrack.add_feature(start=550, end=600, strand=1, plotstyle=\"bigrbox\", label=\"bigrbox\", labelrotation=0, labelvpos=\"bottom\", labelha=\"center\", facecolor=\"skyblue\", edgecolor=\"red\", linewidth=1)\ntrack.add_feature(start=650, end=750, strand=-1, plotstyle=\"rbox\", label=\"rbox\", labelrotation=0, labelvpos=\"center\", labelha=\"center\")\ntrack.add_feature(start=780, end=880, strand=1, label=\"arrow\\nshaft=0.2\", labelrotation=0, labelha=\"center\", arrow_shaft_ratio=0.2, facecolor=\"lime\", patch_kws=dict(hatch=\"o\"))\ntrack.add_feature(start=890, end=990, strand=1, label=\"arrow\\nshaft=1.0\", labelrotation=0, labelha=\"center\", arrow_shaft_ratio=1.0, facecolor=\"lime\", patch_kws=dict(hatch=\"/\"))\n\nfig = gv.plotfig()\n</pre> from pygenomeviz import GenomeViz  gv = GenomeViz(tick_style=\"axis\") track = gv.add_feature_track(name=\"tutorial\", size=1000)  track.add_feature(start=50, end=150, strand=1, label=\"bigarrow\") track.add_feature(start=200, end=300, strand=-1, plotstyle=\"arrow\", label=\"arrow\", linewidth=1) track.add_feature(start=330, end=400, strand=1, plotstyle=\"bigbox\", label=\"bigbox\", labelrotation=0, labelha=\"center\") track.add_feature(start=420, end=500, strand=1, plotstyle=\"box\", label=\"box\", labelcolor=\"blue\", labelsize=10, facecolor=\"red\", ) track.add_feature(start=550, end=600, strand=1, plotstyle=\"bigrbox\", label=\"bigrbox\", labelrotation=0, labelvpos=\"bottom\", labelha=\"center\", facecolor=\"skyblue\", edgecolor=\"red\", linewidth=1) track.add_feature(start=650, end=750, strand=-1, plotstyle=\"rbox\", label=\"rbox\", labelrotation=0, labelvpos=\"center\", labelha=\"center\") track.add_feature(start=780, end=880, strand=1, label=\"arrow\\nshaft=0.2\", labelrotation=0, labelha=\"center\", arrow_shaft_ratio=0.2, facecolor=\"lime\", patch_kws=dict(hatch=\"o\")) track.add_feature(start=890, end=990, strand=1, label=\"arrow\\nshaft=1.0\", labelrotation=0, labelha=\"center\", arrow_shaft_ratio=1.0, facecolor=\"lime\", patch_kws=dict(hatch=\"/\"))  fig = gv.plotfig() In\u00a0[4]: Copied! <pre>from pygenomeviz import GenomeViz\n\ngenome_list = (\n    {\"name\": \"genome 01\", \"size\": 1000, \"cds_list\": ((150, 300, 1), (500, 700, -1), (750, 950, 1))},\n    {\"name\": \"genome 02\", \"size\": 1300, \"cds_list\": ((50, 200, 1), (350, 450, 1), (700, 900, -1), (950, 1150, -1))},\n    {\"name\": \"genome 03\", \"size\": 1200, \"cds_list\": ((150, 300, 1), (350, 450, -1), (500, 700, -1), (701, 900, -1))},\n)\n\ngv = GenomeViz(tick_style=\"axis\")\nfor genome in genome_list:\n    name, size, cds_list = genome[\"name\"], genome[\"size\"], genome[\"cds_list\"]\n    track = gv.add_feature_track(name, size)\n    for cds in cds_list:\n        start, end, strand = cds\n        track.add_feature(start, end, strand)\n\nfig = gv.plotfig()\n</pre> from pygenomeviz import GenomeViz  genome_list = (     {\"name\": \"genome 01\", \"size\": 1000, \"cds_list\": ((150, 300, 1), (500, 700, -1), (750, 950, 1))},     {\"name\": \"genome 02\", \"size\": 1300, \"cds_list\": ((50, 200, 1), (350, 450, 1), (700, 900, -1), (950, 1150, -1))},     {\"name\": \"genome 03\", \"size\": 1200, \"cds_list\": ((150, 300, 1), (350, 450, -1), (500, 700, -1), (701, 900, -1))}, )  gv = GenomeViz(tick_style=\"axis\") for genome in genome_list:     name, size, cds_list = genome[\"name\"], genome[\"size\"], genome[\"cds_list\"]     track = gv.add_feature_track(name, size)     for cds in cds_list:         start, end, strand = cds         track.add_feature(start, end, strand)  fig = gv.plotfig() In\u00a0[5]: Copied! <pre>from pygenomeviz import GenomeViz\n\ngenome_list = (\n    {\"name\": \"genome 01\", \"size\": 1000, \"cds_list\": ((150, 300, 1), (500, 700, -1), (750, 950, 1))},\n    {\"name\": \"genome 02\", \"size\": 1300, \"cds_list\": ((50, 200, 1), (350, 450, 1), (700, 900, -1), (950, 1150, -1))},\n    {\"name\": \"genome 03\", \"size\": 1200, \"cds_list\": ((150, 300, 1), (350, 450, -1), (500, 700, -1), (701, 900, -1))},\n)\n\ngv = GenomeViz(align_type=\"center\", tick_style=\"bar\")\nfor genome in genome_list:\n    name, size, cds_list = genome[\"name\"], genome[\"size\"], genome[\"cds_list\"]\n    track = gv.add_feature_track(name, size)\n    for cds in cds_list:\n        start, end, strand = cds\n        track.add_feature(start, end, strand)\n\n# Add links between \"genome 01\" and \"genome 02\"\ngv.add_link((\"genome 01\", 150, 300), (\"genome 02\", 50, 200))\ngv.add_link((\"genome 01\", 700, 500), (\"genome 02\", 900, 700))\ngv.add_link((\"genome 01\", 750, 950), (\"genome 02\", 1150, 950))\n# Add links between \"genome 02\" and \"genome 03\"\ngv.add_link((\"genome 02\", 50, 200), (\"genome 03\", 150, 300), normal_color=\"skyblue\", inverted_color=\"lime\", curve=True)\ngv.add_link((\"genome 02\", 350, 450), (\"genome 03\", 450, 350), normal_color=\"skyblue\", inverted_color=\"lime\", curve=True)\ngv.add_link((\"genome 02\", 900, 700), (\"genome 03\", 700, 500), normal_color=\"skyblue\", inverted_color=\"lime\", curve=True)\ngv.add_link((\"genome 03\", 900, 701), (\"genome 02\", 1150, 950), normal_color=\"skyblue\", inverted_color=\"lime\", curve=True)\n\nfig = gv.plotfig()\n</pre> from pygenomeviz import GenomeViz  genome_list = (     {\"name\": \"genome 01\", \"size\": 1000, \"cds_list\": ((150, 300, 1), (500, 700, -1), (750, 950, 1))},     {\"name\": \"genome 02\", \"size\": 1300, \"cds_list\": ((50, 200, 1), (350, 450, 1), (700, 900, -1), (950, 1150, -1))},     {\"name\": \"genome 03\", \"size\": 1200, \"cds_list\": ((150, 300, 1), (350, 450, -1), (500, 700, -1), (701, 900, -1))}, )  gv = GenomeViz(align_type=\"center\", tick_style=\"bar\") for genome in genome_list:     name, size, cds_list = genome[\"name\"], genome[\"size\"], genome[\"cds_list\"]     track = gv.add_feature_track(name, size)     for cds in cds_list:         start, end, strand = cds         track.add_feature(start, end, strand)  # Add links between \"genome 01\" and \"genome 02\" gv.add_link((\"genome 01\", 150, 300), (\"genome 02\", 50, 200)) gv.add_link((\"genome 01\", 700, 500), (\"genome 02\", 900, 700)) gv.add_link((\"genome 01\", 750, 950), (\"genome 02\", 1150, 950)) # Add links between \"genome 02\" and \"genome 03\" gv.add_link((\"genome 02\", 50, 200), (\"genome 03\", 150, 300), normal_color=\"skyblue\", inverted_color=\"lime\", curve=True) gv.add_link((\"genome 02\", 350, 450), (\"genome 03\", 450, 350), normal_color=\"skyblue\", inverted_color=\"lime\", curve=True) gv.add_link((\"genome 02\", 900, 700), (\"genome 03\", 700, 500), normal_color=\"skyblue\", inverted_color=\"lime\", curve=True) gv.add_link((\"genome 03\", 900, 701), (\"genome 02\", 1150, 950), normal_color=\"skyblue\", inverted_color=\"lime\", curve=True)  fig = gv.plotfig() In\u00a0[6]: Copied! <pre>from pygenomeviz import GenomeViz\n\nexon_regions1 = [(0, 210), (300, 480), (590, 800), (850, 1000), (1030, 1300)]\nexon_regions2 = [(1500, 1710), (2000, 2480), (2590, 2800)]\nexon_regions3 = [(3000, 3300), (3400, 3690), (3800, 4100), (4200, 4620)]\n\ngv = GenomeViz()\ntrack = gv.add_feature_track(name=f\"Exon Features\", size=5000)\ntrack.add_exon_feature(exon_regions1, strand=1, plotstyle=\"box\", label=\"box\", labelrotation=0, labelha=\"center\")\ntrack.add_exon_feature(exon_regions2, strand=-1, plotstyle=\"arrow\", label=\"arrow\", labelrotation=0, labelha=\"center\", facecolor=\"darkgrey\", intron_patch_kws={\"ec\": \"red\"})\n\nexon_labels = [f\"exon{i+1}\" for i in range(len(exon_regions3))]\ntrack.add_exon_feature(exon_regions3, strand=1, plotstyle=\"bigarrow\", label=\"bigarrow\", facecolor=\"lime\", linewidth=1, exon_labels=exon_labels, labelrotation=0, labelha=\"center\", exon_label_kws={\"y\": 0, \"va\": \"center\", \"color\": \"blue\"})\n\nfig = gv.plotfig()\n</pre> from pygenomeviz import GenomeViz  exon_regions1 = [(0, 210), (300, 480), (590, 800), (850, 1000), (1030, 1300)] exon_regions2 = [(1500, 1710), (2000, 2480), (2590, 2800)] exon_regions3 = [(3000, 3300), (3400, 3690), (3800, 4100), (4200, 4620)]  gv = GenomeViz() track = gv.add_feature_track(name=f\"Exon Features\", size=5000) track.add_exon_feature(exon_regions1, strand=1, plotstyle=\"box\", label=\"box\", labelrotation=0, labelha=\"center\") track.add_exon_feature(exon_regions2, strand=-1, plotstyle=\"arrow\", label=\"arrow\", labelrotation=0, labelha=\"center\", facecolor=\"darkgrey\", intron_patch_kws={\"ec\": \"red\"})  exon_labels = [f\"exon{i+1}\" for i in range(len(exon_regions3))] track.add_exon_feature(exon_regions3, strand=1, plotstyle=\"bigarrow\", label=\"bigarrow\", facecolor=\"lime\", linewidth=1, exon_labels=exon_labels, labelrotation=0, labelha=\"center\", exon_label_kws={\"y\": 0, \"va\": \"center\", \"color\": \"blue\"})  fig = gv.plotfig() In\u00a0[7]: Copied! <pre>from pygenomeviz import GenomeViz\nimport random\nrandom.seed(0)\n\nexon_regions = [(0, 210), (300, 480), (590, 800), (850, 1000), (1030, 1300), (1500, 1710), (2000, 2480), (2590, 2800), (3000, 3300), (3400, 3690), (3800, 4100), (4200, 4610)]\n\ngv = GenomeViz(fig_track_height=0.5)\nplotstyles = (\"bigarrow\", \"arrow\", \"bigbox\", \"box\")\ncolors = (\"red\", \"skyblue\", \"lime\", \"orange\")\nfor plotstyle, color in zip(plotstyles, colors):\n    for strand in (1, -1):\n        track = gv.add_feature_track(name=f\"{plotstyle} ({strand})\", size=exon_regions[-1][-1])\n\n        sample_num = len(exon_regions) - random.randint(0, int(len(exon_regions) / 2))\n        random_sample_exon_regions = sorted(random.sample(exon_regions, sample_num))\n        track.add_exon_feature(random_sample_exon_regions, strand, plotstyle=plotstyle, facecolor=color, linewidth=0.5)\n\nfig = gv.plotfig()\n</pre> from pygenomeviz import GenomeViz import random random.seed(0)  exon_regions = [(0, 210), (300, 480), (590, 800), (850, 1000), (1030, 1300), (1500, 1710), (2000, 2480), (2590, 2800), (3000, 3300), (3400, 3690), (3800, 4100), (4200, 4610)]  gv = GenomeViz(fig_track_height=0.5) plotstyles = (\"bigarrow\", \"arrow\", \"bigbox\", \"box\") colors = (\"red\", \"skyblue\", \"lime\", \"orange\") for plotstyle, color in zip(plotstyles, colors):     for strand in (1, -1):         track = gv.add_feature_track(name=f\"{plotstyle} ({strand})\", size=exon_regions[-1][-1])          sample_num = len(exon_regions) - random.randint(0, int(len(exon_regions) / 2))         random_sample_exon_regions = sorted(random.sample(exon_regions, sample_num))         track.add_exon_feature(random_sample_exon_regions, strand, plotstyle=plotstyle, facecolor=color, linewidth=0.5)  fig = gv.plotfig() In\u00a0[8]: Copied! <pre>from pygenomeviz import Genbank, GenomeViz, load_example_dataset\n\ngbk_files, _ = load_example_dataset(\"enterobacteria_phage\")\ngbk = Genbank(gbk_files[0])\n\ngv = GenomeViz()\ntrack = gv.add_feature_track(name=gbk.name, size=gbk.range_size)\ntrack.add_genbank_features(gbk)  # By default, add `CDS` type features\n\nfig = gv.plotfig()\n</pre> from pygenomeviz import Genbank, GenomeViz, load_example_dataset  gbk_files, _ = load_example_dataset(\"enterobacteria_phage\") gbk = Genbank(gbk_files[0])  gv = GenomeViz() track = gv.add_feature_track(name=gbk.name, size=gbk.range_size) track.add_genbank_features(gbk)  # By default, add `CDS` type features  fig = gv.plotfig() In\u00a0[9]: Copied! <pre>from pygenomeviz import Gff, GenomeViz, load_example_gff\n\ngff_file = load_example_gff(\"enterobacteria_phage.gff\")\ngff = Gff(gff_file)\n\ngv = GenomeViz()\ntrack = gv.add_feature_track(name=gff.name, size=gff.range_size)\ntrack.add_gff_features(gff, plotstyle=\"arrow\", facecolor=\"skyblue\")  # By default, add `CDS` type features\n\nfig = gv.plotfig()\n</pre> from pygenomeviz import Gff, GenomeViz, load_example_gff  gff_file = load_example_gff(\"enterobacteria_phage.gff\") gff = Gff(gff_file)  gv = GenomeViz() track = gv.add_feature_track(name=gff.name, size=gff.range_size) track.add_gff_features(gff, plotstyle=\"arrow\", facecolor=\"skyblue\")  # By default, add `CDS` type features  fig = gv.plotfig()  In\u00a0[10]: Copied! <pre>from pygenomeviz import Genbank, GenomeViz, load_example_dataset\n\ngv = GenomeViz(\n    feature_track_ratio=0.3,\n    tick_track_ratio=0.5,\n    tick_style=\"axis\",\n)\n\ngbk_files, links = load_example_dataset(\"escherichia_phage\")\nfor gbk_file in gbk_files:\n    gbk = Genbank(gbk_file)\n    track = gv.add_feature_track(gbk.name, gbk.range_size)\n    track.add_genbank_features(gbk)\n\nmin_identity = int(min([link.identity for link in links]))\nfor link in links:\n    link_data1 = (link.ref_name, link.ref_start, link.ref_end)\n    link_data2 = (link.query_name, link.query_start, link.query_end)\n    gv.add_link(link_data1, link_data2, v=link.identity, vmin=min_identity, curve=True)\n\nfig = gv.plotfig()\n</pre> from pygenomeviz import Genbank, GenomeViz, load_example_dataset  gv = GenomeViz(     feature_track_ratio=0.3,     tick_track_ratio=0.5,     tick_style=\"axis\", )  gbk_files, links = load_example_dataset(\"escherichia_phage\") for gbk_file in gbk_files:     gbk = Genbank(gbk_file)     track = gv.add_feature_track(gbk.name, gbk.range_size)     track.add_genbank_features(gbk)  min_identity = int(min([link.identity for link in links])) for link in links:     link_data1 = (link.ref_name, link.ref_start, link.ref_end)     link_data2 = (link.query_name, link.query_start, link.query_end)     gv.add_link(link_data1, link_data2, v=link.identity, vmin=min_identity, curve=True)  fig = gv.plotfig() In\u00a0[11]: Copied! <pre># MUMmer installation is required to run cell below\n# In Colab environment, run apt-get command to install MUMmer\n# !apt-get install mummer\n</pre> # MUMmer installation is required to run cell below # In Colab environment, run apt-get command to install MUMmer # !apt-get install mummer  In\u00a0[12]: Copied! <pre>from pygenomeviz import Genbank, GenomeViz, load_example_dataset\nfrom pygenomeviz.align import MUMmer, AlignCoord, MMseqs\nfrom tempfile import TemporaryDirectory\n\ngv = GenomeViz(\n    fig_track_height=0.7,\n    link_track_ratio=2.0,\n    align_type=\"center\",\n    tick_style=\"bar\",\n)\n\ngbk_files, _ = load_example_dataset(\"enterobacteria_phage\")\ngbk_list = [Genbank(f) for f in gbk_files]\nfor gbk in gbk_list:\n    track = gv.add_feature_track(gbk.name, gbk.range_size)\n    track.add_genbank_features(gbk, facecolor=\"skyblue\", linewidth=0.5)\n\n# Run MUMmer alignment\nwith TemporaryDirectory() as tmpdir:\n    # seqtype='nucleotide'|'protein', maptype='one-to-one'|'many-to-many'\n    align_coords = MUMmer(gbk_list, tmpdir, seqtype=\"protein\", maptype=\"many-to-many\").run()\n    # Filter alignment results by 'min_length', 'min_identity' threshold\n    align_coords = AlignCoord.filter(align_coords, min_length=0, min_identity=0)\n    # Write alignment result as tsv format file\n    AlignCoord.write(align_coords, f\"{tmpdir}/align_coords.tsv\")\n\nmin_identity = int(min([ac.identity for ac in align_coords]))\nfor ac in align_coords:\n    link1 = (ac.ref_name, ac.ref_start, ac.ref_end)\n    link2 = (ac.query_name, ac.query_start, ac.query_end)\n    gv.add_link(link1, link2, curve=True, v=ac.identity, vmin=min_identity)\n\nfig = gv.plotfig()\n\ngv.set_colorbar(fig, vmin=min_identity)\n</pre> from pygenomeviz import Genbank, GenomeViz, load_example_dataset from pygenomeviz.align import MUMmer, AlignCoord, MMseqs from tempfile import TemporaryDirectory  gv = GenomeViz(     fig_track_height=0.7,     link_track_ratio=2.0,     align_type=\"center\",     tick_style=\"bar\", )  gbk_files, _ = load_example_dataset(\"enterobacteria_phage\") gbk_list = [Genbank(f) for f in gbk_files] for gbk in gbk_list:     track = gv.add_feature_track(gbk.name, gbk.range_size)     track.add_genbank_features(gbk, facecolor=\"skyblue\", linewidth=0.5)  # Run MUMmer alignment with TemporaryDirectory() as tmpdir:     # seqtype='nucleotide'|'protein', maptype='one-to-one'|'many-to-many'     align_coords = MUMmer(gbk_list, tmpdir, seqtype=\"protein\", maptype=\"many-to-many\").run()     # Filter alignment results by 'min_length', 'min_identity' threshold     align_coords = AlignCoord.filter(align_coords, min_length=0, min_identity=0)     # Write alignment result as tsv format file     AlignCoord.write(align_coords, f\"{tmpdir}/align_coords.tsv\")  min_identity = int(min([ac.identity for ac in align_coords])) for ac in align_coords:     link1 = (ac.ref_name, ac.ref_start, ac.ref_end)     link2 = (ac.query_name, ac.query_start, ac.query_end)     gv.add_link(link1, link2, curve=True, v=ac.identity, vmin=min_identity)  fig = gv.plotfig()  gv.set_colorbar(fig, vmin=min_identity)"},{"location":"getting_started/#1-simple-datasets","title":"1. Simple Datasets\u00b6","text":""},{"location":"getting_started/#1-1-add-track","title":"1-1. Add Track\u00b6","text":"<ul> <li>Create GenomeViz class instance</li> <li>Add FeatureTrack by add_feature_track method</li> <li>Plot figure by plotfig method</li> <li>Plot &amp; Save figure by savefig or savefig_html method</li> </ul>"},{"location":"getting_started/#1-2-add-features","title":"1-2. Add Features\u00b6","text":"<ul> <li>Add features by add_feature method</li> </ul>"},{"location":"getting_started/#1-3-add-tracks-features","title":"1-3. Add Tracks &amp; Features\u00b6","text":""},{"location":"getting_started/#1-4-add-links","title":"1-4. Add Links\u00b6","text":"<ul> <li>Add links by add_link method</li> </ul>"},{"location":"getting_started/#1-5-add-exon-features","title":"1-5. Add Exon Features\u00b6","text":"<ul> <li>Add exon features by add_exon_feature method</li> </ul>"},{"location":"getting_started/#1-6-add-tracks-exon-features","title":"1-6. Add Tracks &amp; Exon Features\u00b6","text":""},{"location":"getting_started/#2-real-datasets","title":"2. Real Datasets\u00b6","text":""},{"location":"getting_started/#2-1-add-features-from-genbank-file","title":"2-1. Add Features from Genbank file\u00b6","text":"<ul> <li>Download real datasets by <code>load_example_dataset</code> function <p>Dataset contains Genbank files &amp; pre-created genome comparison links data</p> </li> <li>Load genbank file by Genbank parser class</li> <li>Add features by add_genbank_features method</li> </ul>"},{"location":"getting_started/#2-2-add-features-from-gff-file","title":"2-2. Add Features from GFF file\u00b6","text":"<ul> <li>Download GFF example file by <code>load_example_gff</code> function</li> <li>Load GFF file by Gff parser class</li> <li>Add features by add_gff_features method</li> </ul>"},{"location":"getting_started/#2-3-add-tracks-links-from-genbank-files","title":"2-3. Add Tracks &amp; Links from Genbank files\u00b6","text":""},{"location":"getting_started/#2-4-genome-alignment-visualization-workflow","title":"2-4. Genome Alignment &amp; Visualization Workflow\u00b6","text":"<p>As an additional option, pyGenomeViz implements a genome alignment function with MUMmer (Linux/MacOS only). If MUMmer v3 or v4 is installed in your user environment, you can perform genome sequence comparison and visualization as follows.</p>"},{"location":"api-docs/genbank/","title":"Genbank Class","text":""},{"location":"api-docs/genbank/#pygenomeviz.parser.genbank.Genbank","title":"Genbank","text":"<pre><code>Genbank(\n    gbk_source: str | Path | TextIOWrapper,\n    name: str | None = None,\n    reverse: bool = False,\n    min_range: int | None = None,\n    max_range: int | None = None,\n)\n</code></pre> <p>Genbank Parser Class</p> PARAMETER DESCRIPTION <code>gbk_source</code> <p>Genbank file or source (<code>*.gz</code>, <code>*.bz2</code>, <code>*.zip</code> compressed file can be readable)</p> <p> TYPE: <code>str | Path | TextIOWrapper</code> </p> <code>name</code> <p>name (If None, <code>file name</code> or <code>record name</code> is set)</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>reverse</code> <p>If True, reverse complement genome is used</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>min_range</code> <p>Min range to be extracted (Default: <code>0</code>)</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>max_range</code> <p>Max range to be extracted (Default: <code>genome length</code>)</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p>"},{"location":"api-docs/genbank/#pygenomeviz.parser.genbank.Genbank.name","title":"name  <code>property</code>","text":"<pre><code>name: str\n</code></pre> <p>Name</p>"},{"location":"api-docs/genbank/#pygenomeviz.parser.genbank.Genbank.records","title":"records  <code>property</code>","text":"<pre><code>records: list[SeqRecord]\n</code></pre> <p>Genbank records</p>"},{"location":"api-docs/genbank/#pygenomeviz.parser.genbank.Genbank.full_genome_length","title":"full_genome_length  <code>property</code>","text":"<pre><code>full_genome_length: int\n</code></pre> <p>Full genome sequence length</p>"},{"location":"api-docs/genbank/#pygenomeviz.parser.genbank.Genbank.genome_length","title":"genome_length  <code>property</code>","text":"<pre><code>genome_length: int\n</code></pre> <p>Range genome sequence length (Same as <code>range_size</code>)</p>"},{"location":"api-docs/genbank/#pygenomeviz.parser.genbank.Genbank.range_size","title":"range_size  <code>property</code>","text":"<pre><code>range_size: int\n</code></pre> <p>Range size (<code>max_range - min_range</code>)</p>"},{"location":"api-docs/genbank/#pygenomeviz.parser.genbank.Genbank.full_genome_seq","title":"full_genome_seq  <code>property</code>","text":"<pre><code>full_genome_seq: str\n</code></pre> <p>Full genome sequence</p>"},{"location":"api-docs/genbank/#pygenomeviz.parser.genbank.Genbank.genome_seq","title":"genome_seq  <code>property</code>","text":"<pre><code>genome_seq: str\n</code></pre> <p>Range genome sequence</p>"},{"location":"api-docs/genbank/#pygenomeviz.parser.genbank.Genbank.calc_genome_gc_content","title":"calc_genome_gc_content","text":"<pre><code>calc_genome_gc_content() -&gt; float\n</code></pre> <p>Calculate genome GC content</p>"},{"location":"api-docs/genbank/#pygenomeviz.parser.genbank.Genbank.calc_gc_skew","title":"calc_gc_skew","text":"<pre><code>calc_gc_skew(\n    window_size: int | None = None,\n    step_size: int | None = None,\n    *,\n    seq: str | None = None\n) -&gt; tuple[np.ndarray, np.ndarray]\n</code></pre> <p>Calculate GC skew in sliding window</p> PARAMETER DESCRIPTION <code>window_size</code> <p>Window size (Default: <code>genome_size / 500</code>)</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>step_size</code> <p>Step size (Default: <code>genome_size / 1000</code>)</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>seq</code> <p>Sequence for GCskew calculation (Default: <code>self.genome_seq</code>)</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>gc_skew_result_tuple</code> <p>Position list &amp; GC skew list</p> <p> TYPE: <code>tuple[ndarray, ndarray]</code> </p>"},{"location":"api-docs/genbank/#pygenomeviz.parser.genbank.Genbank.calc_gc_content","title":"calc_gc_content","text":"<pre><code>calc_gc_content(\n    window_size: int | None = None,\n    step_size: int | None = None,\n    *,\n    seq: str | None = None\n) -&gt; tuple[np.ndarray, np.ndarray]\n</code></pre> <p>Calculate GC content in sliding window</p> PARAMETER DESCRIPTION <code>window_size</code> <p>Window size (Default: <code>genome_size / 500</code>)</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>step_size</code> <p>Step size (Default: <code>genome_size / 1000</code>)</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>seq</code> <p>Sequence for GCskew calculation (Default: <code>self.genome_seq</code>)</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>gc_content_result_tuple</code> <p>Position list &amp; GC content list</p> <p> TYPE: <code>tuple[ndarray, ndarray]</code> </p>"},{"location":"api-docs/genbank/#pygenomeviz.parser.genbank.Genbank.get_seqid2seq","title":"get_seqid2seq","text":"<pre><code>get_seqid2seq() -&gt; dict[str, str]\n</code></pre> <p>Get seqid &amp; complete/contig/scaffold genome sequence dict</p> RETURNS DESCRIPTION <code>seqid2seq</code> <p>seqid &amp; genome sequence dict</p> <p> TYPE: <code>dict[str, int]</code> </p>"},{"location":"api-docs/genbank/#pygenomeviz.parser.genbank.Genbank.get_seqid2size","title":"get_seqid2size","text":"<pre><code>get_seqid2size() -&gt; dict[str, int]\n</code></pre> <p>Get seqid &amp; complete/contig/scaffold genome size dict</p> RETURNS DESCRIPTION <code>seqid2size</code> <p>seqid &amp; genome size dict</p> <p> TYPE: <code>dict[str, int]</code> </p>"},{"location":"api-docs/genbank/#pygenomeviz.parser.genbank.Genbank.get_seqid2features","title":"get_seqid2features","text":"<pre><code>get_seqid2features(\n    feature_type: str | None = \"CDS\",\n    target_strand: int | None = None,\n    pseudogene: bool | None = False,\n) -&gt; dict[str, list[SeqFeature]]\n</code></pre> <p>Get seqid &amp; features in target seqid genome dict</p> PARAMETER DESCRIPTION <code>feature_type</code> <p>Feature type (<code>CDS</code>, <code>gene</code>, <code>mRNA</code>, etc...) If None, extract regardless of feature type.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>'CDS'</code> </p> <code>target_strand</code> <p>Extract target strand. If None, extract regardless of strand.</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>pseudogene</code> <p>If True, <code>pseudo=</code>, <code>pseudogene=</code> tagged record only extract. If False, <code>pseudo=</code>, <code>pseudogene=</code> not tagged record only extract. If None, extract regardless of pseudogene tag.</p> <p> TYPE: <code>bool | None</code> DEFAULT: <code>False</code> </p> RETURNS DESCRIPTION <code>seqid2features</code> <p>seqid &amp; features dict</p> <p> TYPE: <code>dict[str, list[SeqFeature]]</code> </p>"},{"location":"api-docs/genbank/#pygenomeviz.parser.genbank.Genbank.extract_features","title":"extract_features","text":"<pre><code>extract_features(\n    feature_type: str = \"CDS\",\n    target_strand: int | None = None,\n    fix_position: bool = False,\n    allow_partial: bool = False,\n    pseudogene: bool = False,\n) -&gt; list[SeqFeature]\n</code></pre> <p>Extract features within min-max range</p> PARAMETER DESCRIPTION <code>feature_type</code> <p>Extract feature type</p> <p> TYPE: <code>str</code> DEFAULT: <code>'CDS'</code> </p> <code>target_strand</code> <p>Extract target strand</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>fix_position</code> <p>If True, fix feature start &amp; end position by specified min_range parameter (fixed_start = start - min_range, fixed_end = end - min_range)</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>allow_partial</code> <p>If True, allow extraction of features that are partially included in range</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>pseudogene</code> <p>If True and <code>feature_type='CDS'</code>, only extract CDS features with <code>/pseudo</code> or <code>/pseudogene</code> qualifiers.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> RETURNS DESCRIPTION <code>features</code> <p>Extracted features</p> <p> TYPE: <code>list[SeqFeature]</code> </p>"},{"location":"api-docs/genbank/#pygenomeviz.parser.genbank.Genbank.write_cds_fasta","title":"write_cds_fasta","text":"<pre><code>write_cds_fasta(\n    fasta_outfile: str | Path,\n    seqtype: str = \"protein\",\n    fix_position: bool = False,\n    allow_partial: bool = False,\n)\n</code></pre> <p>Write CDS protein features fasta file</p> PARAMETER DESCRIPTION <code>fasta_outfile</code> <p>CDS fasta file</p> <p> TYPE: <code>str | Path</code> </p> <code>seqtype</code> <p>Sequence type (<code>protein</code>|<code>nucleotide</code>)</p> <p> TYPE: <code>str</code> DEFAULT: <code>'protein'</code> </p> <code>fix_position</code> <p>If True, fix feature start &amp; end position by specified min_range parameter (fixed_start = start - min_range, fixed_end = end - min_range)</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>allow_partial</code> <p>If True, features that are partially included in range are also extracted</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p>"},{"location":"api-docs/genbank/#pygenomeviz.parser.genbank.Genbank.write_genome_fasta","title":"write_genome_fasta","text":"<pre><code>write_genome_fasta(outfile: str | Path) -&gt; None\n</code></pre> <p>Write genome fasta file</p> PARAMETER DESCRIPTION <code>outfile</code> <p>Output genome fasta file</p> <p> TYPE: <code>str | Path</code> </p>"},{"location":"api-docs/genomeviz/","title":"GenomeViz Class","text":""},{"location":"api-docs/genomeviz/#pygenomeviz.genomeviz.GenomeViz","title":"GenomeViz","text":"<pre><code>GenomeViz(\n    fig_width: float = 15,\n    fig_track_height: float = 1.0,\n    align_type: LiteralTypes.ALIGN_TYPE = \"left\",\n    feature_track_ratio: float = 1.0,\n    link_track_ratio: float = 1.0,\n    tick_track_ratio: float = 1.0,\n    track_spines: bool = False,\n    tick_style: LiteralTypes.TICK_STYLE = None,\n    plot_size_thr: float = 0,\n    tick_labelsize: int = 15,\n)\n</code></pre> <p>GenomeViz Class</p> PARAMETER DESCRIPTION <code>fig_width</code> <p>Figure width</p> <p> TYPE: <code>float</code> DEFAULT: <code>15</code> </p> <code>fig_track_height</code> <p>Figure track height (Figure height = <code>track number</code> * <code>fig track height</code>)</p> <p> TYPE: <code>float</code> DEFAULT: <code>1.0</code> </p> <code>align_type</code> <p>Track align type (<code>left</code>|<code>center</code>|<code>right</code>)</p> <p> TYPE: <code>str</code> DEFAULT: <code>'left'</code> </p> <code>feature_track_ratio</code> <p>Feature track ratio</p> <p> TYPE: <code>float</code> DEFAULT: <code>1.0</code> </p> <code>link_track_ratio</code> <p>Link track ratio</p> <p> TYPE: <code>float</code> DEFAULT: <code>1.0</code> </p> <code>tick_track_ratio</code> <p>Tick track ratio</p> <p> TYPE: <code>float</code> DEFAULT: <code>1.0</code> </p> <code>track_spines</code> <p>If True, display track spines</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>tick_style</code> <p>Tick style (<code>axis</code>|<code>bar</code>)</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>plot_size_thr</code> <p>Plot feature, link size threshold. If <code>plot_size_thr=0.0005</code> and <code>max_track_size=4.0Mb</code>, feature, link smaller than <code>max_track_size * plot_size_thr=2.0Kb</code> are not plotted.</p> <p> TYPE: <code>float</code> DEFAULT: <code>0</code> </p> <code>tick_labelsize</code> <p>Tick label size</p> <p> TYPE: <code>int</code> DEFAULT: <code>15</code> </p>"},{"location":"api-docs/genomeviz/#pygenomeviz.genomeviz.GenomeViz.top_track","title":"top_track  <code>property</code>","text":"<pre><code>top_track: FeatureTrack\n</code></pre> <p>Top feature track</p>"},{"location":"api-docs/genomeviz/#pygenomeviz.genomeviz.GenomeViz.bottom_track","title":"bottom_track  <code>property</code>","text":"<pre><code>bottom_track: FeatureTrack\n</code></pre> <p>Bottom feature track</p>"},{"location":"api-docs/genomeviz/#pygenomeviz.genomeviz.GenomeViz.max_track_size","title":"max_track_size  <code>property</code>","text":"<pre><code>max_track_size: int\n</code></pre> <p>Max track size</p>"},{"location":"api-docs/genomeviz/#pygenomeviz.genomeviz.GenomeViz.get_track","title":"get_track","text":"<pre><code>get_track(track_name: str) -&gt; Track\n</code></pre> <p>Get track by name</p> PARAMETER DESCRIPTION <code>track_name</code> <p>Target track name</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>track</code> <p>Target track</p> <p> TYPE: <code>Track</code> </p>"},{"location":"api-docs/genomeviz/#pygenomeviz.genomeviz.GenomeViz.get_tracks","title":"get_tracks","text":"<pre><code>get_tracks(subtrack: bool = False) -&gt; list[Track]\n</code></pre> <p>Get tracks</p> PARAMETER DESCRIPTION <code>subtrack</code> <p>If True, include feature subtracks</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> RETURNS DESCRIPTION <code>tracks</code> <p>Track list</p> <p> TYPE: <code>list[Track]</code> </p>"},{"location":"api-docs/genomeviz/#pygenomeviz.genomeviz.GenomeViz.get_feature_tracks","title":"get_feature_tracks","text":"<pre><code>get_feature_tracks() -&gt; list[FeatureTrack]\n</code></pre> <p>Get feature tracks</p> RETURNS DESCRIPTION <code>feature_tracks</code> <p>Feature track list</p> <p> TYPE: <code>list[FeatureTrack]</code> </p>"},{"location":"api-docs/genomeviz/#pygenomeviz.genomeviz.GenomeViz.get_link_tracks","title":"get_link_tracks","text":"<pre><code>get_link_tracks() -&gt; list[LinkTrack]\n</code></pre> <p>Get link tracks</p> RETURNS DESCRIPTION <code>link_tracks</code> <p>Link track list</p> <p> TYPE: <code>list[LinkTrack]</code> </p>"},{"location":"api-docs/genomeviz/#pygenomeviz.genomeviz.GenomeViz.add_feature_track","title":"add_feature_track","text":"<pre><code>add_feature_track(\n    name: str,\n    size: int,\n    start_pos: int = 0,\n    labelsize: int = 20,\n    labelcolor: str = \"black\",\n    labelmargin: float = 0.01,\n    linewidth: int = 1,\n    linecolor: str = \"grey\",\n    link_track_ratio: float | None = None,\n) -&gt; FeatureTrack\n</code></pre> <p>Add feature track</p> <p>Add feature track, and also add link track between feature tracks if other feature tracks already exist.</p> PARAMETER DESCRIPTION <code>name</code> <p>Track name</p> <p> TYPE: <code>str</code> </p> <code>size</code> <p>Track size</p> <p> TYPE: <code>int</code> </p> <code>start_pos</code> <p>Track start position. Track start-end range is defined as (start_pos, start_pos + size).</p> <p> TYPE: <code>int</code> DEFAULT: <code>0</code> </p> <code>labelsize</code> <p>Track label size</p> <p> TYPE: <code>int</code> DEFAULT: <code>20</code> </p> <code>labelcolor</code> <p>Track label color</p> <p> TYPE: <code>str</code> DEFAULT: <code>'black'</code> </p> <code>labelmargin</code> <p>Track label margin</p> <p> TYPE: <code>float</code> DEFAULT: <code>0.01</code> </p> <code>linewidth</code> <p>Track line width</p> <p> TYPE: <code>int</code> DEFAULT: <code>1</code> </p> <code>linecolor</code> <p>Track line color</p> <p> TYPE: <code>str</code> DEFAULT: <code>'grey'</code> </p> <code>link_track_ratio</code> <p>Link track ratio. By default, the link_track_ratio value set when GenomeViz was instantiated is used.</p> <p> TYPE: <code>float | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>feature_track</code> <p>Feature track</p> <p> TYPE: <code>FeatureTrack</code> </p>"},{"location":"api-docs/genomeviz/#pygenomeviz.genomeviz.GenomeViz.add_link","title":"add_link","text":"<pre><code>add_link(\n    track_link1: tuple[str, int, int],\n    track_link2: tuple[str, int, int],\n    normal_color: str = \"grey\",\n    inverted_color: str = \"red\",\n    alpha: float = 0.8,\n    v: float | None = None,\n    vmin: float = 0,\n    vmax: float = 100,\n    curve: bool = False,\n    size_ratio: float = 1.0,\n    patch_kws: dict[str, Any] | None = None,\n) -&gt; None\n</code></pre> <p>Add link data to link track between adjacent feature tracks</p> PARAMETER DESCRIPTION <code>track_link1</code> <p>Track link1 (track_name, start, end)</p> <p> TYPE: <code>tuple[str, int, int]</code> </p> <code>track_link2</code> <p>Track link2 (track_name, start, end)</p> <p> TYPE: <code>tuple[str, int, int]</code> </p> <code>normal_color</code> <p>Normal link color</p> <p> TYPE: <code>str</code> DEFAULT: <code>'grey'</code> </p> <code>inverted_color</code> <p>Inverted link color</p> <p> TYPE: <code>str</code> DEFAULT: <code>'red'</code> </p> <code>alpha</code> <p>Color transparency</p> <p> TYPE: <code>float</code> DEFAULT: <code>0.8</code> </p> <code>v</code> <p>Value for color interpolation</p> <p> TYPE: <code>float | None</code> DEFAULT: <code>None</code> </p> <code>vmin</code> <p>Min value for color interpolation</p> <p> TYPE: <code>float</code> DEFAULT: <code>0</code> </p> <code>vmax</code> <p>Max value for color interpolation</p> <p> TYPE: <code>float</code> DEFAULT: <code>100</code> </p> <code>curve</code> <p>If True, bezier curve link is plotted</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>size_ratio</code> <p>Link size ratio to track</p> <p> TYPE: <code>float</code> DEFAULT: <code>1.0</code> </p> <code>patch_kws</code> <p>Patch properties (e.g. <code>dict(fc=\"red\", ec=\"black\", lw=0.5, ...)</code>) https://matplotlib.org/stable/api/_as_gen/matplotlib.patches.Patch.html</p> <p> TYPE: <code>dict[str, Any] | None</code> DEFAULT: <code>None</code> </p>"},{"location":"api-docs/genomeviz/#pygenomeviz.genomeviz.GenomeViz.set_colorbar","title":"set_colorbar","text":"<pre><code>set_colorbar(\n    figure: Figure,\n    bar_colors: list[str] | None = None,\n    alpha: float = 0.8,\n    vmin: float = 0,\n    vmax: float = 100,\n    bar_height: float = 0.2,\n    bar_width: float = 0.01,\n    bar_left: float = 1.02,\n    bar_bottom: float = 0,\n    bar_label: str = \"\",\n    bar_labelsize: float = 15,\n    tick_labelsize: float = 10,\n) -&gt; None\n</code></pre> <p>Set colorbars to figure</p> <p>Set colorbars for similarity links between genome tracks</p> PARAMETER DESCRIPTION <code>figure</code> <p>Matplotlib figure</p> <p> TYPE: <code>Figure</code> </p> <code>bar_colors</code> <p>Bar color list</p> <p> TYPE: <code>list[str] | None</code> DEFAULT: <code>None</code> </p> <code>alpha</code> <p>Color transparency</p> <p> TYPE: <code>float</code> DEFAULT: <code>0.8</code> </p> <code>vmin</code> <p>Colorbar min value</p> <p> TYPE: <code>float</code> DEFAULT: <code>0</code> </p> <code>vmax</code> <p>Colorbar max value</p> <p> TYPE: <code>float</code> DEFAULT: <code>100</code> </p> <code>bar_height</code> <p>Colorbar height</p> <p> TYPE: <code>float</code> DEFAULT: <code>0.2</code> </p> <code>bar_width</code> <p>Colorbar width</p> <p> TYPE: <code>float</code> DEFAULT: <code>0.01</code> </p> <code>bar_left</code> <p>Colorbar left position</p> <p> TYPE: <code>float</code> DEFAULT: <code>1.02</code> </p> <code>bar_bottom</code> <p>Colorbar bottom position</p> <p> TYPE: <code>float</code> DEFAULT: <code>0</code> </p> <code>bar_label</code> <p>Colorbar label name</p> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>bar_labelsize</code> <p>Colorbar label size</p> <p> TYPE: <code>float</code> DEFAULT: <code>15</code> </p> <code>tick_labelsize</code> <p>Colorbar tick label size</p> <p> TYPE: <code>float</code> DEFAULT: <code>10</code> </p>"},{"location":"api-docs/genomeviz/#pygenomeviz.genomeviz.GenomeViz.plotfig","title":"plotfig","text":"<pre><code>plotfig(dpi: int = 100) -&gt; Figure\n</code></pre> <p>Plot figure</p> PARAMETER DESCRIPTION <code>dpi</code> <p>DPI</p> <p> TYPE: <code>int</code> DEFAULT: <code>100</code> </p> RETURNS DESCRIPTION <code>figure</code> <p>Plot figure result</p> <p> TYPE: <code>Figure</code> </p>"},{"location":"api-docs/genomeviz/#pygenomeviz.genomeviz.GenomeViz.savefig","title":"savefig","text":"<pre><code>savefig(savefile: str | Path, dpi: int = 100, pad_inches: float = 0.5) -&gt; None\n</code></pre> <p>Save figure to file</p> PARAMETER DESCRIPTION <code>savefile</code> <p>Save file</p> <p> TYPE: <code>str | Path</code> </p> <code>dpi</code> <p>DPI</p> <p> TYPE: <code>int</code> DEFAULT: <code>100</code> </p> <code>pad_inches</code> <p>Padding inches</p> <p> TYPE: <code>float</code> DEFAULT: <code>0.5</code> </p>"},{"location":"api-docs/genomeviz/#pygenomeviz.genomeviz.GenomeViz.savefig_html","title":"savefig_html","text":"<pre><code>savefig_html(\n    html_outfile: str | Path | io.StringIO | io.BytesIO, fig: Figure | None = None\n) -&gt; None\n</code></pre> <p>Save figure in html format</p> PARAMETER DESCRIPTION <code>html_outfile</code> <p>Output HTML file (*.html)</p> <p> TYPE: <code>str | Path | StringIO | BytesIO</code> </p> <code>fig</code> <p>If Figure set, plot html viewer using user customized fig</p> <p> TYPE: <code>Figure | None</code> DEFAULT: <code>None</code> </p>"},{"location":"api-docs/gff/","title":"Gff Class","text":""},{"location":"api-docs/gff/#pygenomeviz.parser.gff.Gff","title":"Gff","text":"<pre><code>Gff(\n    gff_file: str | Path,\n    name: str | None = None,\n    target_seqid: str | None = None,\n    min_range: int | None = None,\n    max_range: int | None = None,\n)\n</code></pre> <p>GFF Parser Class</p> PARAMETER DESCRIPTION <code>gff_file</code> <p>GFF file (<code>*.gz</code>, <code>*.bz2</code>, <code>*.zip</code> compressed file can be readable)</p> <p> TYPE: <code>str | Path</code> </p> <code>name</code> <p>name (If None, <code>file name</code> is set)</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>target_seqid</code> <p>Target seqid to be extracted. If None, only first seqid record is extracted.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>min_range</code> <p>Min range to be extracted. If None, appropriate value is taken from GFF records.</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>max_range</code> <p>Max range to be extracted. If None, appropriate value is taken from GFF records.</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p>"},{"location":"api-docs/gff/#pygenomeviz.parser.gff.Gff.name","title":"name  <code>property</code>","text":"<pre><code>name: str\n</code></pre> <p>Name</p>"},{"location":"api-docs/gff/#pygenomeviz.parser.gff.Gff.seq_region","title":"seq_region  <code>property</code>","text":"<pre><code>seq_region: tuple[int, int]\n</code></pre> <p>GFF sequence-region start &amp; end tuple</p> <p>If <code>##sequence-region</code> pragma is not found, seq_region=<code>(0, max_coords_value)</code></p>"},{"location":"api-docs/gff/#pygenomeviz.parser.gff.Gff.records","title":"records  <code>property</code>","text":"<pre><code>records: list[GffRecord]\n</code></pre> <p>GFF records (target seqid only)</p>"},{"location":"api-docs/gff/#pygenomeviz.parser.gff.Gff.all_records","title":"all_records  <code>property</code>","text":"<pre><code>all_records: list[GffRecord]\n</code></pre> <p>All GFF records</p>"},{"location":"api-docs/gff/#pygenomeviz.parser.gff.Gff.records_within_range","title":"records_within_range  <code>property</code>","text":"<pre><code>records_within_range: list[GffRecord]\n</code></pre> <p>GFF records within min-max range</p>"},{"location":"api-docs/gff/#pygenomeviz.parser.gff.Gff.range_size","title":"range_size  <code>property</code>","text":"<pre><code>range_size: int\n</code></pre> <p>Range size (<code>max_range - min_range</code>)</p>"},{"location":"api-docs/gff/#pygenomeviz.parser.gff.Gff.target_seqid","title":"target_seqid  <code>property</code>","text":"<pre><code>target_seqid: str\n</code></pre> <p>Target seqid</p>"},{"location":"api-docs/gff/#pygenomeviz.parser.gff.Gff.seqid_list","title":"seqid_list  <code>property</code>","text":"<pre><code>seqid_list: list[str]\n</code></pre> <p>seqid list</p>"},{"location":"api-docs/gff/#pygenomeviz.parser.gff.Gff.get_seqid2size","title":"get_seqid2size","text":"<pre><code>get_seqid2size() -&gt; dict[str, int]\n</code></pre> <p>Get seqid &amp; complete/contig/scaffold genome size dict</p> <p>By default, size is defined by <code>##sequence-region</code> pragma of target seqid. If <code>##sequence-region</code> is not found, size is defined by max coordinate size in target seqid features. This may differ from actual genome size.</p> RETURNS DESCRIPTION <code>seqid2size</code> <p>seqid &amp; genome size dict</p> <p> TYPE: <code>dict[str, int]</code> </p>"},{"location":"api-docs/gff/#pygenomeviz.parser.gff.Gff.get_seqid2features","title":"get_seqid2features","text":"<pre><code>get_seqid2features(\n    feature_type: str | None = \"CDS\",\n    target_strand: int | None = None,\n    pseudogene: bool | None = False,\n) -&gt; dict[str, list[SeqFeature]]\n</code></pre> <p>Get seqid &amp; features in target seqid genome dict</p> PARAMETER DESCRIPTION <code>feature_type</code> <p>Feature type (<code>CDS</code>, <code>gene</code>, <code>mRNA</code>, etc...) If None, extract regardless of feature type.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>'CDS'</code> </p> <code>target_strand</code> <p>Extract target strand. If None, extract regardless of strand.</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>pseudogene</code> <p>If True, <code>pseudo=</code>, <code>pseudogene=</code> tagged record only extract. If False, <code>pseudo=</code>, <code>pseudogene=</code> not tagged record only extract. If None, extract regardless of pseudogene tag.</p> <p> TYPE: <code>bool | None</code> DEFAULT: <code>False</code> </p> RETURNS DESCRIPTION <code>seqid2features</code> <p>seqid &amp; features dict</p> <p> TYPE: <code>dict[str, list[SeqFeature]]</code> </p>"},{"location":"api-docs/gff/#pygenomeviz.parser.gff.Gff.extract_features","title":"extract_features","text":"<pre><code>extract_features(\n    feature_type: str | None = \"CDS\",\n    target_strand: int | None = None,\n    pseudogene: bool | None = False,\n) -&gt; list[SeqFeature]\n</code></pre> <p>Extract features within min-max range</p> PARAMETER DESCRIPTION <code>feature_type</code> <p>Feature type (<code>CDS</code>, <code>gene</code>, <code>mRNA</code>, etc...) If None, extract regardless of feature type.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>'CDS'</code> </p> <code>target_strand</code> <p>Extract target strand. If None, extract regardless of strand.</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>pseudogene</code> <p>If True, <code>pseudo=</code>, <code>pseudogene=</code> tagged record only extract. If False, <code>pseudo=</code>, <code>pseudogene=</code> not tagged record only extract. If None, extract all regardless of pseudogene tag.</p> <p> TYPE: <code>bool | None</code> DEFAULT: <code>False</code> </p> RETURNS DESCRIPTION <code>features</code> <p>Feature list</p> <p> TYPE: <code>list[SeqFeature]</code> </p>"},{"location":"api-docs/gff/#pygenomeviz.parser.gff.Gff.extract_exon_features","title":"extract_exon_features","text":"<pre><code>extract_exon_features(feature_type: str = 'mRNA') -&gt; list[SeqFeature]\n</code></pre> <p>Extract exon structure features within min-max range</p> <p>Extract exons based on <code>parent feature</code> and <code>exon</code> ID-Parent relation</p> PARAMETER DESCRIPTION <code>feature_type</code> <p>Feature type (e.g. <code>mRNA</code>, <code>ncRNA</code> , etc...)</p> <p> TYPE: <code>str</code> DEFAULT: <code>'mRNA'</code> </p> RETURNS DESCRIPTION <code>features</code> <p>Feature list</p> <p> TYPE: <code>list[SeqFeature]</code> </p>"},{"location":"api-docs/track/","title":"FeatureTrack Class","text":""},{"location":"api-docs/track/#pygenomeviz.track.FeatureTrack","title":"FeatureTrack","text":"<pre><code>FeatureTrack(\n    name: str,\n    size: int,\n    start_pos: int = 0,\n    labelsize: int = 20,\n    labelcolor: str = \"black\",\n    labelmargin: float = 0.01,\n    linewidth: int = 1,\n    linecolor: str = \"black\",\n    spines: bool = False,\n    ratio: float = 1.0,\n)\n</code></pre> <p>               Bases: <code>Track</code></p> <p>FeatureTrack Class</p> PARAMETER DESCRIPTION <code>name</code> <p>Track name</p> <p> TYPE: <code>str</code> </p> <code>size</code> <p>Track size</p> <p> TYPE: <code>int</code> </p> <code>start_pos</code> <p>Track start position. Track start-end range is defined as (start_pos, start_pos + size).</p> <p> TYPE: <code>int</code> DEFAULT: <code>0</code> </p> <code>labelsize</code> <p>Track label size</p> <p> TYPE: <code>int</code> DEFAULT: <code>20</code> </p> <code>labelcolor</code> <p>Track label color</p> <p> TYPE: <code>str</code> DEFAULT: <code>'black'</code> </p> <code>labelmargin</code> <p>Track label margin</p> <p> TYPE: <code>float</code> DEFAULT: <code>0.01</code> </p> <code>linewidth</code> <p>Track line width</p> <p> TYPE: <code>int</code> DEFAULT: <code>1</code> </p> <code>linecolor</code> <p>Track line color</p> <p> TYPE: <code>str</code> DEFAULT: <code>'black'</code> </p> <code>spines</code> <p>Display track spines</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>ratio</code> <p>Track height ratio</p> <p> TYPE: <code>float</code> DEFAULT: <code>1.0</code> </p>"},{"location":"api-docs/track/#pygenomeviz.track.FeatureTrack.add_feature","title":"add_feature","text":"<pre><code>add_feature(\n    start: int,\n    end: int,\n    strand: LiteralTypes.STRAND = 1,\n    label: str = \"\",\n    labelsize: int = 15,\n    labelcolor: str = \"black\",\n    plotstyle: LiteralTypes.PLOTSTYLE = \"bigarrow\",\n    facecolor: str = \"orange\",\n    edgecolor: str = \"black\",\n    linewidth: float = 0,\n    labelrotation: int = 45,\n    labelvpos: LiteralTypes.LABELVPOS = \"strand\",\n    labelhpos: LiteralTypes.LABELHPOS = \"center\",\n    labelha: LiteralTypes.LABELHA = \"left\",\n    arrow_shaft_ratio: float = 0.5,\n    size_ratio: float = 1.0,\n    patch_kws: dict[str, Any] | None = None,\n) -&gt; None\n</code></pre> <p>Add feature to track</p> PARAMETER DESCRIPTION <code>start</code> <p>Featrue start position</p> <p> TYPE: <code>int</code> </p> <code>end</code> <p>Feature end position</p> <p> TYPE: <code>int</code> </p> <code>strand</code> <p>Feature strand</p> <p> TYPE: <code>int</code> DEFAULT: <code>1</code> </p> <code>label</code> <p>Feature label</p> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>labelsize</code> <p>Feature label size</p> <p> TYPE: <code>int</code> DEFAULT: <code>15</code> </p> <code>labelcolor</code> <p>Feature label color</p> <p> TYPE: <code>str</code> DEFAULT: <code>'black'</code> </p> <code>plotstyle</code> <p>Feature plot style (<code>bigarrow</code>|<code>arrow</code>|<code>bigbox</code>|<code>box</code>|<code>bigrbox</code>|<code>rbox</code>)</p> <p> TYPE: <code>str</code> DEFAULT: <code>'bigarrow'</code> </p> <code>facecolor</code> <p>Feature facecolor</p> <p> TYPE: <code>str</code> DEFAULT: <code>'orange'</code> </p> <code>edgecolor</code> <p>Feature edgecolor</p> <p> TYPE: <code>str</code> DEFAULT: <code>'black'</code> </p> <code>linewidth</code> <p>Feature edge linewidth</p> <p> TYPE: <code>float</code> DEFAULT: <code>0</code> </p> <code>labelrotation</code> <p>Feature label rotation</p> <p> TYPE: <code>int</code> DEFAULT: <code>45</code> </p> <code>labelvpos</code> <p>Feature label vertical position (<code>top</code>|<code>center</code>|<code>bottom</code>|<code>strand</code>) If 'strand' is set, 'top' or 'bottom' is auto selected by strand.</p> <p> TYPE: <code>str</code> DEFAULT: <code>'strand'</code> </p> <code>labelhpos</code> <p>Feature label horizontal position (<code>left</code>|<code>center</code>|<code>right</code>)</p> <p> TYPE: <code>str</code> DEFAULT: <code>'center'</code> </p> <code>labelha</code> <p>Feature label horizontal alignment (<code>left</code>|<code>center</code>|<code>right</code>)</p> <p> TYPE: <code>str</code> DEFAULT: <code>'left'</code> </p> <code>arrow_shaft_ratio</code> <p>Feature arrow shaft ratio</p> <p> TYPE: <code>float</code> DEFAULT: <code>0.5</code> </p> <code>size_ratio</code> <p>Feature size ratio to track</p> <p> TYPE: <code>float</code> DEFAULT: <code>1.0</code> </p> <code>patch_kws</code> <p>Patch properties (e.g. <code>fc=\"red\", ec=\"black\", lw=0.5, ...</code>) https://matplotlib.org/stable/api/_as_gen/matplotlib.patches.Patch.html</p> <p> TYPE: <code>dict[str, Any] | None</code> DEFAULT: <code>None</code> </p>"},{"location":"api-docs/track/#pygenomeviz.track.FeatureTrack.add_exon_feature","title":"add_exon_feature","text":"<pre><code>add_exon_feature(\n    exon_regions: list[tuple[int, int]],\n    strand: LiteralTypes.STRAND = 1,\n    label: str = \"\",\n    labelsize: int = 15,\n    labelcolor: str = \"black\",\n    plotstyle: LiteralTypes.PLOTSTYLE = \"bigarrow\",\n    facecolor: str = \"orange\",\n    edgecolor: str = \"black\",\n    linewidth: float = 0,\n    labelrotation: int = 45,\n    labelvpos: LiteralTypes.LABELVPOS = \"strand\",\n    labelhpos: LiteralTypes.LABELHPOS = \"center\",\n    labelha: LiteralTypes.LABELHA = \"left\",\n    arrow_shaft_ratio: float = 0.5,\n    size_ratio: float = 1.0,\n    exon_labels: list[str] | None = None,\n    exon_label_kws: dict[str, Any] | None = None,\n    patch_kws: dict[str, Any] | None = None,\n    intron_patch_kws: dict[str, Any] | None = None,\n) -&gt; None\n</code></pre> <p>Add exon feature to track</p> PARAMETER DESCRIPTION <code>exon_regions</code> <p>Exon feature start-end postion list</p> <p> TYPE: <code>list[tuple[int, int]]</code> </p> <code>strand</code> <p>Feature strand</p> <p> TYPE: <code>int</code> DEFAULT: <code>1</code> </p> <code>label</code> <p>Feature label</p> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>labelsize</code> <p>Feature label size</p> <p> TYPE: <code>int</code> DEFAULT: <code>15</code> </p> <code>labelcolor</code> <p>Feature label color</p> <p> TYPE: <code>str</code> DEFAULT: <code>'black'</code> </p> <code>plotstyle</code> <p>Feature plot style (<code>bigarrow</code>|<code>arrow</code>|<code>bigbox</code>|<code>box</code>|<code>bigrbox</code>|<code>rbox</code>)</p> <p> TYPE: <code>str</code> DEFAULT: <code>'bigarrow'</code> </p> <code>facecolor</code> <p>Feature facecolor</p> <p> TYPE: <code>str</code> DEFAULT: <code>'orange'</code> </p> <code>edgecolor</code> <p>Feature edgecolor</p> <p> TYPE: <code>str</code> DEFAULT: <code>'black'</code> </p> <code>linewidth</code> <p>Feature edge linewidth</p> <p> TYPE: <code>float</code> DEFAULT: <code>0</code> </p> <code>labelrotation</code> <p>Feature label rotation</p> <p> TYPE: <code>int</code> DEFAULT: <code>45</code> </p> <code>labelvpos</code> <p>Feature label vertical position (<code>top</code>|<code>center</code>|<code>bottom</code>|<code>strand</code>) If 'strand' is set, 'top' or 'bottom' is auto selected by strand.</p> <p> TYPE: <code>str</code> DEFAULT: <code>'strand'</code> </p> <code>labelhpos</code> <p>Feature label horizontal position (<code>left</code>|<code>center</code>|<code>right</code>)</p> <p> TYPE: <code>str</code> DEFAULT: <code>'center'</code> </p> <code>labelha</code> <p>Feature label horizontal alignment (<code>left</code>|<code>center</code>|<code>right</code>)</p> <p> TYPE: <code>str</code> DEFAULT: <code>'left'</code> </p> <code>arrow_shaft_ratio</code> <p>Feature arrow shaft ratio</p> <p> TYPE: <code>float</code> DEFAULT: <code>0.5</code> </p> <code>size_ratio</code> <p>Feature size ratio to track</p> <p> TYPE: <code>float</code> DEFAULT: <code>1.0</code> </p> <code>exon_labels</code> <p>Exon labels. Array length must be same as <code>exon_regions</code>.</p> <p> TYPE: <code>list[str] | None</code> DEFAULT: <code>None</code> </p> <code>exon_label_kws</code> <p>Text properties (e.g. <code>dict(size=12, color=\"red\", ...)</code>) https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.text.html</p> <p> TYPE: <code>dict[str, Any] | None</code> DEFAULT: <code>None</code> </p> <code>patch_kws</code> <p>Exon patch properties (e.g. <code>dict(fc=\"red\", ec=\"black\", lw=0.5, ...)</code>) https://matplotlib.org/stable/api/_as_gen/matplotlib.patches.Patch.html</p> <p> TYPE: <code>dict[str, Any] | None</code> DEFAULT: <code>None</code> </p> <code>intron_patch_kws</code> <p>Intron patch properties (e.g. <code>dict(ec=\"red\", lw=2, ...)</code>) https://matplotlib.org/stable/api/_as_gen/matplotlib.patches.Patch.html</p> <p> TYPE: <code>dict[str, Any] | None</code> DEFAULT: <code>None</code> </p>"},{"location":"api-docs/track/#pygenomeviz.track.FeatureTrack.add_features","title":"add_features","text":"<pre><code>add_features(\n    features: list[SeqFeature],\n    label_type: str | None = None,\n    label_handle_func: Callable[[str], str] | None = None,\n    labelsize: int = 15,\n    labelcolor: str = \"black\",\n    plotstyle: LiteralTypes.PLOTSTYLE = \"bigarrow\",\n    facecolor: str = \"orange\",\n    edgecolor: str = \"black\",\n    linewidth: float = 0,\n    labelrotation: int = 45,\n    labelvpos: LiteralTypes.LABELVPOS = \"strand\",\n    labelhpos: LiteralTypes.LABELHPOS = \"center\",\n    labelha: LiteralTypes.LABELHA = \"left\",\n    arrow_shaft_ratio: float = 0.5,\n    size_ratio: float = 1.0,\n    patch_kws: dict[str, Any] | None = None,\n) -&gt; None\n</code></pre> <p>Add features (BioPython's SeqFeature list)</p> PARAMETER DESCRIPTION <code>features</code> <p>BioPython's SeqFeature list</p> <p> TYPE: <code>str</code> </p> <code>label_type</code> <p>Label type (e.g. <code>gene</code>,<code>protein_id</code>,<code>product</code>,etc...)</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>label_handle_func</code> <p>User defined function to handle label. Useful for filtering out unnecesary labels such as <code>hypothetical ~~~</code>, omitting labels with long characters, etc.</p> <p> TYPE: <code>Callable[[str], str] | None</code> DEFAULT: <code>None</code> </p> <code>labelsize</code> <p>Feature label size</p> <p> TYPE: <code>int</code> DEFAULT: <code>15</code> </p> <code>labelcolor</code> <p>Feature label color</p> <p> TYPE: <code>str</code> DEFAULT: <code>'black'</code> </p> <code>plotstyle</code> <p>Feature plot style (<code>bigarrow</code>|<code>arrow</code>|<code>bigbox</code>|<code>box</code>|<code>bigrbox</code>|<code>rbox</code>)</p> <p> TYPE: <code>str</code> DEFAULT: <code>'bigarrow'</code> </p> <code>facecolor</code> <p>Feature facecolor. If Genbank qualifiers has facecolor key (e.g. <code>/facecolor=\"red\"</code>), facecolor key value is applied preferentially.</p> <p> TYPE: <code>str</code> DEFAULT: <code>'orange'</code> </p> <code>edgecolor</code> <p>Feature edgecolor</p> <p> TYPE: <code>str</code> DEFAULT: <code>'black'</code> </p> <code>linewidth</code> <p>Feature edge linewidth</p> <p> TYPE: <code>float</code> DEFAULT: <code>0</code> </p> <code>labelrotation</code> <p>Feature label rotation</p> <p> TYPE: <code>int</code> DEFAULT: <code>45</code> </p> <code>labelvpos</code> <p>Feature label vertical position (<code>top</code>|<code>center</code>|<code>bottom</code>|<code>strand</code>) If 'strand' is set, 'top' or 'bottom' is auto selected by strand.</p> <p> TYPE: <code>str</code> DEFAULT: <code>'strand'</code> </p> <code>labelhpos</code> <p>Feature label horizontal position (<code>left</code>|<code>center</code>|<code>right</code>)</p> <p> TYPE: <code>str</code> DEFAULT: <code>'center'</code> </p> <code>labelha</code> <p>Feature label horizontal alignment (<code>left</code>|<code>center</code>|<code>right</code>)</p> <p> TYPE: <code>str</code> DEFAULT: <code>'left'</code> </p> <code>arrow_shaft_ratio</code> <p>Feature arrow shaft ratio</p> <p> TYPE: <code>float</code> DEFAULT: <code>0.5</code> </p> <code>size_ratio</code> <p>Feature size ratio to track</p> <p> TYPE: <code>float</code> DEFAULT: <code>1.0</code> </p> <code>patch_kws</code> <p>Patch properties (e.g. <code>dict(fc=\"red\", ec=\"black\", lw=0.5, ...)</code>) https://matplotlib.org/stable/api/_as_gen/matplotlib.patches.Patch.html</p> <p> TYPE: <code>dict[str, Any] | None</code> DEFAULT: <code>None</code> </p>"},{"location":"api-docs/track/#pygenomeviz.track.FeatureTrack.add_genbank_features","title":"add_genbank_features","text":"<pre><code>add_genbank_features(\n    gbk: Genbank,\n    feature_type: str = \"CDS\",\n    label_type: str | None = None,\n    label_handle_func: Callable[[str], str] | None = None,\n    allow_partial: bool = False,\n    pseudogene: bool = False,\n    labelsize: int = 15,\n    labelcolor: str = \"black\",\n    plotstyle: LiteralTypes.PLOTSTYLE = \"bigarrow\",\n    facecolor: str = \"orange\",\n    facecolor_handle_func: Callable[[SeqFeature], str] | None = None,\n    edgecolor: str = \"black\",\n    linewidth: float = 0,\n    labelrotation: int = 45,\n    labelvpos: LiteralTypes.LABELVPOS = \"strand\",\n    labelhpos: LiteralTypes.LABELHPOS = \"center\",\n    labelha: LiteralTypes.LABELHA = \"left\",\n    arrow_shaft_ratio: float = 0.5,\n    size_ratio: float = 1.0,\n    patch_kws: dict[str, Any] | None = None,\n) -&gt; None\n</code></pre> <p>Add features from genbank record</p> PARAMETER DESCRIPTION <code>gbk</code> <p>Genbank object</p> <p> TYPE: <code>Genbank</code> </p> <code>feature_type</code> <p>Feature type (e.g. <code>CDS</code>,<code>rRNA</code>,<code>tRNA</code>,etc...)</p> <p> TYPE: <code>str</code> DEFAULT: <code>'CDS'</code> </p> <code>label_type</code> <p>Label type (e.g. <code>gene</code>,<code>protein_id</code>,<code>product</code>,etc...)</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>label_handle_func</code> <p>User defined function to handle label. Useful for filtering out unnecesary labels such as <code>hypothetical ~~~</code>, omitting labels with long characters, etc.</p> <p> TYPE: <code>Callable[[str], str] | None</code> DEFAULT: <code>None</code> </p> <code>allow_partial</code> <p>If True, features that are partially included in range are also extracted</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>pseudogene</code> <p>If True and <code>feature_type='CDS'</code>, only add CDS features with <code>/pseudo</code> or <code>/pseudogene</code> qualifiers.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>labelsize</code> <p>Feature label size</p> <p> TYPE: <code>int</code> DEFAULT: <code>15</code> </p> <code>labelcolor</code> <p>Feature label color</p> <p> TYPE: <code>str</code> DEFAULT: <code>'black'</code> </p> <code>plotstyle</code> <p>Feature plot style (<code>bigarrow</code>|<code>arrow</code>|<code>bigbox</code>|<code>box</code>|<code>bigrbox</code>|<code>rbox</code>)</p> <p> TYPE: <code>str</code> DEFAULT: <code>'bigarrow'</code> </p> <code>facecolor</code> <p>Feature facecolor. If Genbank qualifiers has facecolor key (e.g. <code>/facecolor=\"red\"</code>), facecolor key value is applied preferentially.</p> <p> TYPE: <code>str</code> DEFAULT: <code>'orange'</code> </p> <code>facecolor_handle_func</code> <p>User defined function to handle feature facecolor.</p> <p> TYPE: <code>Callable[[SeqFeature], str] | None</code> DEFAULT: <code>None</code> </p> <code>edgecolor</code> <p>Feature edgecolor</p> <p> TYPE: <code>str</code> DEFAULT: <code>'black'</code> </p> <code>linewidth</code> <p>Feature edge linewidth</p> <p> TYPE: <code>float</code> DEFAULT: <code>0</code> </p> <code>labelrotation</code> <p>Feature label rotation</p> <p> TYPE: <code>int</code> DEFAULT: <code>45</code> </p> <code>labelvpos</code> <p>Feature label vertical position (<code>top</code>|<code>center</code>|<code>bottom</code>|<code>strand</code>) If 'strand' is set, 'top' or 'bottom' is auto selected by strand.</p> <p> TYPE: <code>str</code> DEFAULT: <code>'strand'</code> </p> <code>labelhpos</code> <p>Feature label horizontal position (<code>left</code>|<code>center</code>|<code>right</code>)</p> <p> TYPE: <code>str</code> DEFAULT: <code>'center'</code> </p> <code>labelha</code> <p>Feature label horizontal alignment (<code>left</code>|<code>center</code>|<code>right</code>)</p> <p> TYPE: <code>str</code> DEFAULT: <code>'left'</code> </p> <code>arrow_shaft_ratio</code> <p>Feature arrow shaft ratio</p> <p> TYPE: <code>float</code> DEFAULT: <code>0.5</code> </p> <code>size_ratio</code> <p>Feature size ratio to track</p> <p> TYPE: <code>float</code> DEFAULT: <code>1.0</code> </p> <code>patch_kws</code> <p>Patch properties (e.g. <code>dict(fc=\"red\", ec=\"black\", lw=0.5, ...)</code>) https://matplotlib.org/stable/api/_as_gen/matplotlib.patches.Patch.html</p> <p> TYPE: <code>dict[str, Any] | None</code> DEFAULT: <code>None</code> </p>"},{"location":"api-docs/track/#pygenomeviz.track.FeatureTrack.add_gff_features","title":"add_gff_features","text":"<pre><code>add_gff_features(\n    gff: Gff,\n    feature_type: str = \"CDS\",\n    parse_exon_intron: bool = False,\n    label_type: str | None = None,\n    label_handle_func: Callable[[str], str] | None = None,\n    labelsize: int = 15,\n    labelcolor: str = \"black\",\n    plotstyle: LiteralTypes.PLOTSTYLE = \"bigarrow\",\n    facecolor: str = \"orange\",\n    facecolor_handle_func: Callable[[SeqFeature], str] | None = None,\n    edgecolor: str = \"black\",\n    linewidth: float = 0,\n    labelrotation: int = 45,\n    labelvpos: LiteralTypes.LABELVPOS = \"strand\",\n    labelhpos: LiteralTypes.LABELHPOS = \"center\",\n    labelha: LiteralTypes.LABELHA = \"left\",\n    arrow_shaft_ratio: float = 0.5,\n    size_ratio: float = 1.0,\n    patch_kws: dict[str, Any] | None = None,\n    intron_patch_kws: dict[str, Any] | None = None,\n) -&gt; None\n</code></pre> <p>Add features from GFF record</p> PARAMETER DESCRIPTION <code>gff</code> <p>GFF object</p> <p> TYPE: <code>Gff</code> </p> <code>feature_type</code> <p>Feature type (e.g. <code>CDS</code>,<code>gene</code>,<code>mRNA</code>,etc...)</p> <p> TYPE: <code>str</code> DEFAULT: <code>'CDS'</code> </p> <code>parse_exon_intron</code> <p>If True, try to parse and add exon-intron structured feature (Expected to be used for eukaryote with feature_type=<code>mRNA</code>|<code>ncRNA</code>)</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>label_type</code> <p>Label type in attributes column (e.g. <code>ID</code>,<code>Name</code>,<code>product</code>,etc...)</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>label_handle_func</code> <p>User defined function to handle label. Useful for filtering out unnecesary labels such as <code>hypothetical ~~~</code>, omitting labels with long characters, etc.</p> <p> TYPE: <code>Callable[[str], str] | None</code> DEFAULT: <code>None</code> </p> <code>labelsize</code> <p>Feature label size</p> <p> TYPE: <code>int</code> DEFAULT: <code>15</code> </p> <code>labelcolor</code> <p>Feature label color</p> <p> TYPE: <code>str</code> DEFAULT: <code>'black'</code> </p> <code>plotstyle</code> <p>Feature plot style (<code>bigarrow</code>|<code>arrow</code>|<code>bigbox</code>|<code>box</code>|<code>bigrbox</code>|<code>rbox</code>)</p> <p> TYPE: <code>str</code> DEFAULT: <code>'bigarrow'</code> </p> <code>facecolor</code> <p>Feature facecolor. If GFF attributes column has facecolor tag (e.g. <code>facecolor=red;</code>), facecolor tag value is applied preferentially.</p> <p> TYPE: <code>str</code> DEFAULT: <code>'orange'</code> </p> <code>facecolor_handle_func</code> <p>User defined function to handle feature facecolor.</p> <p> TYPE: <code>Callable[[SeqFeature], str] | None</code> DEFAULT: <code>None</code> </p> <code>edgecolor</code> <p>Feature edgecolor</p> <p> TYPE: <code>str</code> DEFAULT: <code>'black'</code> </p> <code>linewidth</code> <p>Feature edge linewidth</p> <p> TYPE: <code>float</code> DEFAULT: <code>0</code> </p> <code>labelrotation</code> <p>Feature label rotation</p> <p> TYPE: <code>int</code> DEFAULT: <code>45</code> </p> <code>labelvpos</code> <p>Feature label vertical position (<code>top</code>|<code>center</code>|<code>bottom</code>|<code>strand</code>) If 'strand' is set, 'top' or 'bottom' is auto selected by strand.</p> <p> TYPE: <code>str</code> DEFAULT: <code>'strand'</code> </p> <code>labelhpos</code> <p>Feature label horizontal position (<code>left</code>|<code>center</code>|<code>right</code>)</p> <p> TYPE: <code>str</code> DEFAULT: <code>'center'</code> </p> <code>labelha</code> <p>Feature label horizontal alignment (<code>left</code>|<code>center</code>|<code>right</code>)</p> <p> TYPE: <code>str</code> DEFAULT: <code>'left'</code> </p> <code>arrow_shaft_ratio</code> <p>Feature arrow shaft ratio</p> <p> TYPE: <code>float</code> DEFAULT: <code>0.5</code> </p> <code>size_ratio</code> <p>Feature size ratio to track</p> <p> TYPE: <code>float</code> DEFAULT: <code>1.0</code> </p> <code>patch_kws</code> <p>Patch properties (e.g. <code>dict(fc=\"red\", ec=\"black\", lw=0.5, ...)</code>) https://matplotlib.org/stable/api/_as_gen/matplotlib.patches.Patch.html</p> <p> TYPE: <code>dict[str, Any] | None</code> DEFAULT: <code>None</code> </p> <code>intron_patch_kws</code> <p>Intron patch properties (e.g. <code>dict(ec=\"red\", lw=0.5, ...)</code>) https://matplotlib.org/stable/api/_as_gen/matplotlib.patches.Patch.html</p> <p> TYPE: <code>dict[str, Any] | None</code> DEFAULT: <code>None</code> </p>"},{"location":"api-docs/track/#pygenomeviz.track.FeatureTrack.add_subtrack","title":"add_subtrack","text":"<pre><code>add_subtrack(\n    name: str | None = None, ratio: float = 1.0, position: str = \"below\"\n) -&gt; None\n</code></pre> <p>Add subtrack to feature track</p> PARAMETER DESCRIPTION <code>name</code> <p>Subtrack name. If None, subtrack name is automatically set.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>ratio</code> <p>Subtrack size ratio to feature track</p> <p> TYPE: <code>float</code> DEFAULT: <code>1.0</code> </p> <code>position</code> <p>Subtrack position (<code>above</code>|<code>below</code>)</p> <p> TYPE: <code>str</code> DEFAULT: <code>'below'</code> </p>"},{"location":"api-docs/track/#pygenomeviz.track.FeatureTrack.get_subtrack","title":"get_subtrack","text":"<pre><code>get_subtrack(name: str) -&gt; FeatureSubTrack\n</code></pre> <p>Get subtrack by name</p> PARAMETER DESCRIPTION <code>name</code> <p>Target subtrack name</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>subtrack</code> <p>Target subtrack</p> <p> TYPE: <code>FeatureSubTrack</code> </p>"},{"location":"api-docs/track/#pygenomeviz.track.FeatureTrack.set_sublabel","title":"set_sublabel","text":"<pre><code>set_sublabel(\n    text: str | None = None,\n    size: int = 15,\n    color: str = \"black\",\n    position: str = \"bottom-left\",\n    ymargin: float = 0.2,\n    sublabel_kws: dict[str, Any] | None = None,\n) -&gt; None\n</code></pre> <p>Set sublabel to feature track</p> PARAMETER DESCRIPTION <code>text</code> <p>Sublabel text. If None, <code>{start} - {end} bp</code> label text is set.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>size</code> <p>Sublabel size</p> <p> TYPE: <code>int</code> DEFAULT: <code>15</code> </p> <code>color</code> <p>Sublabel color</p> <p> TYPE: <code>str</code> DEFAULT: <code>'black'</code> </p> <code>position</code> <p>Sublabel position (<code>[top|bottom]-[left|center|right]</code>)</p> <p> TYPE: <code>str</code> DEFAULT: <code>'bottom-left'</code> </p> <code>ymargin</code> <p>Sublabel y-margin</p> <p> TYPE: <code>float</code> DEFAULT: <code>0.2</code> </p> <code>sublabel_kws</code> <p>Text properties (e.g. <code>dict(size=12, color=\"red\", ...)</code>) https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.text.html</p> <p> TYPE: <code>dict[str, Any] | None</code> DEFAULT: <code>None</code> </p>"},{"location":"api-examples/basic_example/","title":"Basic Example","text":"In\u00a0[1]: Copied! <pre># %pip install pygenomeviz\n</pre> # %pip install pygenomeviz  In\u00a0[2]: Copied! <pre>from pygenomeviz import GenomeViz\n\nname, genome_size = \"Tutorial 01\", 5000\ncds_list = ((100, 900, -1), (1100, 1300, 1), (1350, 1500, 1), (1520, 1700, 1), (1900, 2200, -1), (2500, 2700, 1), (2700, 2800, -1), (2850, 3000, -1), (3100, 3500, 1), (3600, 3800, -1), (3900, 4200, -1), (4300, 4700, -1), (4800, 4850, 1))\n\ngv = GenomeViz()\ntrack = gv.add_feature_track(name, genome_size)\nfor idx, cds in enumerate(cds_list, 1):\n    start, end, strand = cds\n    track.add_feature(start, end, strand, label=f\"CDS{idx:02d}\")\n\nfig = gv.plotfig()\n</pre> from pygenomeviz import GenomeViz  name, genome_size = \"Tutorial 01\", 5000 cds_list = ((100, 900, -1), (1100, 1300, 1), (1350, 1500, 1), (1520, 1700, 1), (1900, 2200, -1), (2500, 2700, 1), (2700, 2800, -1), (2850, 3000, -1), (3100, 3500, 1), (3600, 3800, -1), (3900, 4200, -1), (4300, 4700, -1), (4800, 4850, 1))  gv = GenomeViz() track = gv.add_feature_track(name, genome_size) for idx, cds in enumerate(cds_list, 1):     start, end, strand = cds     track.add_feature(start, end, strand, label=f\"CDS{idx:02d}\")  fig = gv.plotfig() In\u00a0[3]: Copied! <pre>from pygenomeviz import GenomeViz\nimport random\n\nrandom.seed(5)\n\nname, genome_size = \"Tutorial 02\", 5000\ncds_list = ((100, 900, -1), (1100, 1300, 1), (1350, 1500, 1), (1520, 1700, 1), (1900, 2200, -1), (2500, 2700, 1), (2700, 2800, -1), (2850, 3000, -1), (3100, 3500, 1), (3600, 3800, -1), (3900, 4200, -1), (4300, 4700, -1), (4800, 4850, 1))\n\ngv = GenomeViz(tick_style=\"axis\")\ntrack = gv.add_feature_track(name, genome_size)\n\nplotstyles = (\"bigarrow\", \"arrow\", \"bigbox\", \"box\", \"bigrbox\", \"rbox\")\ncolors = (\"orange\", \"blue\", \"lime\", \"red\")\nfor idx, cds in enumerate(cds_list, 1):\n    start, end, strand = cds\n    # Random choice 'plotstyle' &amp; 'color'\n    plotstyle, color = random.choice(plotstyles), random.choice(colors)\n    # User can setting various parameters of features to be plotted\n    track.add_feature(start, end, strand, label=plotstyle, labelsize=20, facecolor=color, plotstyle=plotstyle, labelvpos=\"top\", labelhpos=\"center\", labelrotation=60, linewidth=1)\n\nfig = gv.plotfig()\n</pre> from pygenomeviz import GenomeViz import random  random.seed(5)  name, genome_size = \"Tutorial 02\", 5000 cds_list = ((100, 900, -1), (1100, 1300, 1), (1350, 1500, 1), (1520, 1700, 1), (1900, 2200, -1), (2500, 2700, 1), (2700, 2800, -1), (2850, 3000, -1), (3100, 3500, 1), (3600, 3800, -1), (3900, 4200, -1), (4300, 4700, -1), (4800, 4850, 1))  gv = GenomeViz(tick_style=\"axis\") track = gv.add_feature_track(name, genome_size)  plotstyles = (\"bigarrow\", \"arrow\", \"bigbox\", \"box\", \"bigrbox\", \"rbox\") colors = (\"orange\", \"blue\", \"lime\", \"red\") for idx, cds in enumerate(cds_list, 1):     start, end, strand = cds     # Random choice 'plotstyle' &amp; 'color'     plotstyle, color = random.choice(plotstyles), random.choice(colors)     # User can setting various parameters of features to be plotted     track.add_feature(start, end, strand, label=plotstyle, labelsize=20, facecolor=color, plotstyle=plotstyle, labelvpos=\"top\", labelhpos=\"center\", labelrotation=60, linewidth=1)  fig = gv.plotfig() In\u00a0[4]: Copied! <pre>from pygenomeviz import GenomeViz\n\ngenome_list = (\n    {\"name\": \"genome 01\", \"size\": 1000, \"cds_list\": ((150, 300, 1), (500, 700, -1), (750, 950, 1))},\n    {\"name\": \"genome 02\", \"size\": 1300, \"cds_list\": ((50, 200, 1), (350, 450, 1), (700, 900, -1), (950, 1150, -1))},\n    {\"name\": \"genome 03\", \"size\": 1200, \"cds_list\": ((150, 300, 1), (350, 450, -1), (500, 700, -1), (701, 900, -1))},\n)\n\ngv = GenomeViz(tick_style=\"axis\")\nfor genome in genome_list:\n    name, size, cds_list = genome[\"name\"], genome[\"size\"], genome[\"cds_list\"]\n    track = gv.add_feature_track(name, size)\n    for idx, cds in enumerate(cds_list, 1):\n        start, end, strand = cds\n        track.add_feature(start, end, strand, label=f\"gene{idx:02d}\", linewidth=1, labelrotation=0, labelvpos=\"top\", labelhpos=\"center\", labelha=\"center\")\n\n# Add links between \"genome 01\" and \"genome 02\"\ngv.add_link((\"genome 01\", 150, 300), (\"genome 02\", 50, 200))\ngv.add_link((\"genome 01\", 700, 500), (\"genome 02\", 900, 700))\ngv.add_link((\"genome 01\", 750, 950), (\"genome 02\", 1150, 950))\n# Add links between \"genome 02\" and \"genome 03\"\ngv.add_link((\"genome 02\", 50, 200), (\"genome 03\", 150, 300), normal_color=\"skyblue\", inverted_color=\"lime\", curve=True)\ngv.add_link((\"genome 02\", 350, 450), (\"genome 03\", 450, 350), normal_color=\"skyblue\", inverted_color=\"lime\", curve=True)\ngv.add_link((\"genome 02\", 900, 700), (\"genome 03\", 700, 500), normal_color=\"skyblue\", inverted_color=\"lime\", curve=True)\ngv.add_link((\"genome 03\", 900, 701), (\"genome 02\", 1150, 950), normal_color=\"skyblue\", inverted_color=\"lime\", curve=True)\n\nfig = gv.plotfig()\n</pre> from pygenomeviz import GenomeViz  genome_list = (     {\"name\": \"genome 01\", \"size\": 1000, \"cds_list\": ((150, 300, 1), (500, 700, -1), (750, 950, 1))},     {\"name\": \"genome 02\", \"size\": 1300, \"cds_list\": ((50, 200, 1), (350, 450, 1), (700, 900, -1), (950, 1150, -1))},     {\"name\": \"genome 03\", \"size\": 1200, \"cds_list\": ((150, 300, 1), (350, 450, -1), (500, 700, -1), (701, 900, -1))}, )  gv = GenomeViz(tick_style=\"axis\") for genome in genome_list:     name, size, cds_list = genome[\"name\"], genome[\"size\"], genome[\"cds_list\"]     track = gv.add_feature_track(name, size)     for idx, cds in enumerate(cds_list, 1):         start, end, strand = cds         track.add_feature(start, end, strand, label=f\"gene{idx:02d}\", linewidth=1, labelrotation=0, labelvpos=\"top\", labelhpos=\"center\", labelha=\"center\")  # Add links between \"genome 01\" and \"genome 02\" gv.add_link((\"genome 01\", 150, 300), (\"genome 02\", 50, 200)) gv.add_link((\"genome 01\", 700, 500), (\"genome 02\", 900, 700)) gv.add_link((\"genome 01\", 750, 950), (\"genome 02\", 1150, 950)) # Add links between \"genome 02\" and \"genome 03\" gv.add_link((\"genome 02\", 50, 200), (\"genome 03\", 150, 300), normal_color=\"skyblue\", inverted_color=\"lime\", curve=True) gv.add_link((\"genome 02\", 350, 450), (\"genome 03\", 450, 350), normal_color=\"skyblue\", inverted_color=\"lime\", curve=True) gv.add_link((\"genome 02\", 900, 700), (\"genome 03\", 700, 500), normal_color=\"skyblue\", inverted_color=\"lime\", curve=True) gv.add_link((\"genome 03\", 900, 701), (\"genome 02\", 1150, 950), normal_color=\"skyblue\", inverted_color=\"lime\", curve=True)  fig = gv.plotfig() In\u00a0[5]: Copied! <pre>from pygenomeviz import GenomeViz\n\ngenome_list = (\n    {\"name\": \"genome 01\", \"size\": 1000, \"cds_list\": ((150, 300, 1), (500, 700, -1), (750, 950, 1))},\n    {\"name\": \"genome 02\", \"size\": 1300, \"cds_list\": ((50, 200, 1), (350, 450, 1), (700, 900, -1), (950, 1150, -1))},\n    {\"name\": \"genome 03\", \"size\": 1200, \"cds_list\": ((150, 300, 1), (350, 450, -1), (500, 700, -1), (701, 900, -1))},\n)\n\ngv = GenomeViz(\n    fig_track_height=0.7,\n    feature_track_ratio=0.5,\n    link_track_ratio=1.0,\n    tick_track_ratio=0.5,\n    tick_style=\"bar\",\n    align_type=\"center\",\n)\nfor genome in genome_list:\n    name, size, cds_list = genome[\"name\"], genome[\"size\"], genome[\"cds_list\"]\n    track = gv.add_feature_track(name, size, labelmargin=0.03, linecolor=\"grey\", linewidth=3)\n    for idx, cds in enumerate(cds_list, 1):\n        start, end, strand = cds\n        track.add_feature(start, end, strand, label=f\"gene{idx:02d}\", labelcolor=\"white\", facecolor=\"blue\", linewidth=1, labelrotation=0, labelvpos=\"center\", labelhpos=\"center\", labelha=\"center\", arrow_shaft_ratio=1.0)\n\n# Add links (link colors are interpolated by identity)\nlinks = [\n    # Links between \"genome 01\" and \"genome 02\"\n    {\"link1\": (\"genome 01\", 150, 300), \"link2\": (\"genome 02\", 50, 200), \"identity\": 95},\n    {\"link1\": (\"genome 01\", 700, 500), \"link2\": (\"genome 02\", 900, 700), \"identity\": 60},\n    {\"link1\": (\"genome 01\", 750, 950), \"link2\": (\"genome 02\", 1150, 950), \"identity\": 70},\n    # Links between \"genome 02\" and \"genome 03\"\n    {\"link1\": (\"genome 02\", 50, 200), \"link2\": (\"genome 03\", 150, 300), \"identity\": 85},\n    {\"link1\": (\"genome 02\", 350, 450), \"link2\": (\"genome 03\", 450, 350), \"identity\": 40},\n    {\"link1\": (\"genome 02\", 900, 700), \"link2\": (\"genome 03\", 700, 500), \"identity\": 50},\n    {\"link1\": (\"genome 03\", 900, 701), \"link2\": (\"genome 02\", 1150, 950), \"identity\": 60},\n]\nmin_identity = min([link[\"identity\"] for link in links])\nfor link in links:\n    link1, link2, identity = link[\"link1\"], link[\"link2\"], link[\"identity\"]\n    gv.add_link(link1, link2, v=identity, vmin=min_identity, curve=True)\n\nfig = gv.plotfig()\ngv.set_colorbar(fig, vmin=min_identity, bar_height=0.4)\n</pre> from pygenomeviz import GenomeViz  genome_list = (     {\"name\": \"genome 01\", \"size\": 1000, \"cds_list\": ((150, 300, 1), (500, 700, -1), (750, 950, 1))},     {\"name\": \"genome 02\", \"size\": 1300, \"cds_list\": ((50, 200, 1), (350, 450, 1), (700, 900, -1), (950, 1150, -1))},     {\"name\": \"genome 03\", \"size\": 1200, \"cds_list\": ((150, 300, 1), (350, 450, -1), (500, 700, -1), (701, 900, -1))}, )  gv = GenomeViz(     fig_track_height=0.7,     feature_track_ratio=0.5,     link_track_ratio=1.0,     tick_track_ratio=0.5,     tick_style=\"bar\",     align_type=\"center\", ) for genome in genome_list:     name, size, cds_list = genome[\"name\"], genome[\"size\"], genome[\"cds_list\"]     track = gv.add_feature_track(name, size, labelmargin=0.03, linecolor=\"grey\", linewidth=3)     for idx, cds in enumerate(cds_list, 1):         start, end, strand = cds         track.add_feature(start, end, strand, label=f\"gene{idx:02d}\", labelcolor=\"white\", facecolor=\"blue\", linewidth=1, labelrotation=0, labelvpos=\"center\", labelhpos=\"center\", labelha=\"center\", arrow_shaft_ratio=1.0)  # Add links (link colors are interpolated by identity) links = [     # Links between \"genome 01\" and \"genome 02\"     {\"link1\": (\"genome 01\", 150, 300), \"link2\": (\"genome 02\", 50, 200), \"identity\": 95},     {\"link1\": (\"genome 01\", 700, 500), \"link2\": (\"genome 02\", 900, 700), \"identity\": 60},     {\"link1\": (\"genome 01\", 750, 950), \"link2\": (\"genome 02\", 1150, 950), \"identity\": 70},     # Links between \"genome 02\" and \"genome 03\"     {\"link1\": (\"genome 02\", 50, 200), \"link2\": (\"genome 03\", 150, 300), \"identity\": 85},     {\"link1\": (\"genome 02\", 350, 450), \"link2\": (\"genome 03\", 450, 350), \"identity\": 40},     {\"link1\": (\"genome 02\", 900, 700), \"link2\": (\"genome 03\", 700, 500), \"identity\": 50},     {\"link1\": (\"genome 03\", 900, 701), \"link2\": (\"genome 02\", 1150, 950), \"identity\": 60}, ] min_identity = min([link[\"identity\"] for link in links]) for link in links:     link1, link2, identity = link[\"link1\"], link[\"link2\"], link[\"identity\"]     gv.add_link(link1, link2, v=identity, vmin=min_identity, curve=True)  fig = gv.plotfig() gv.set_colorbar(fig, vmin=min_identity, bar_height=0.4)"},{"location":"api-examples/basic_example/#1-single-track","title":"1. Single Track\u00b6","text":""},{"location":"api-examples/basic_example/#1-1-example-1","title":"1-1. Example 1\u00b6","text":""},{"location":"api-examples/basic_example/#1-2-example-2","title":"1-2. Example 2\u00b6","text":""},{"location":"api-examples/basic_example/#2-multiple-tracks-links","title":"2. Multiple Tracks &amp; Links\u00b6","text":""},{"location":"api-examples/basic_example/#2-1-example-1","title":"2-1. Example 1\u00b6","text":""},{"location":"api-examples/basic_example/#2-2-example-2","title":"2-2. Example 2\u00b6","text":""},{"location":"api-examples/customization_tips/","title":"Customization Tips","text":"In\u00a0[1]: Copied! <pre># %pip install pygenomeviz\n</pre> # %pip install pygenomeviz In\u00a0[2]: Copied! <pre>from pygenomeviz import Genbank, GenomeViz, load_example_dataset\n\ngv = GenomeViz(\n    fig_track_height=0.8,\n    feature_track_ratio=0.3,\n    link_track_ratio=1.0,\n    tick_track_ratio=0.3,\n    align_type=\"center\",\n    tick_style=\"bar\",\n)\n\n# Add genbank features\ngbk_files, links = load_example_dataset(\"escherichia_phage\")\ngbk_list = [Genbank(f) for f in gbk_files]\nfor gbk in gbk_list:\n    track = gv.add_feature_track(gbk.name, gbk.range_size)\n    track.add_genbank_features(gbk)\n\n# Add links\nfor link in links:\n    link1 = (link.ref_name, link.ref_start, link.ref_end)\n    link2 = (link.query_name, link.query_start, link.query_end)\n    gv.add_link(link1, link2, curve=True)\n\n# Add subtracks to top track for plotting 'GC content' &amp; 'GC skew'\ngv.top_track.add_subtrack(ratio=0.8)\ngv.top_track.add_subtrack(ratio=0.8)\n\n# Create figure\nfig = gv.plotfig()\n\n# Calculate GC content of top track genome\npos_list, gc_content_list = gbk_list[0].calc_gc_content()\npos_list += gv.top_track.offset  # Offset is required if align_type is not 'left'\n# Plot GC content for top track\ngc_content_ax = gv.top_track.subtracks[0].ax\ngc_content_ax.set_ylim(bottom=0, top=max(gc_content_list))\ngc_content_ax.fill_between(pos_list, gc_content_list, alpha=0.2, color=\"blue\")\ngc_content_ax.text(gv.top_track.offset, max(gc_content_list) / 2, \"GC(%) \", ha=\"right\", va=\"center\", color=\"blue\")\n\n# Calculate GC skew of top track genome\npos_list, gc_skew_list = gbk_list[0].calc_gc_skew()\npos_list += gv.top_track.offset  # Offset is required if align_type is not 'left'\ngc_skew_abs_max = max(abs(gc_skew_list))\n# Plot GC skew for top track\ngc_skew_ax = gv.top_track.subtracks[1].ax\ngc_skew_ax.set_ylim(bottom=-gc_skew_abs_max, top=gc_skew_abs_max)\ngc_skew_ax.fill_between(pos_list, gc_skew_list, alpha=0.2, color=\"red\")\n_ = gc_skew_ax.text(gv.top_track.offset, 0, \"GC skew \", ha=\"right\", va=\"center\", color=\"red\")\n</pre> from pygenomeviz import Genbank, GenomeViz, load_example_dataset  gv = GenomeViz(     fig_track_height=0.8,     feature_track_ratio=0.3,     link_track_ratio=1.0,     tick_track_ratio=0.3,     align_type=\"center\",     tick_style=\"bar\", )  # Add genbank features gbk_files, links = load_example_dataset(\"escherichia_phage\") gbk_list = [Genbank(f) for f in gbk_files] for gbk in gbk_list:     track = gv.add_feature_track(gbk.name, gbk.range_size)     track.add_genbank_features(gbk)  # Add links for link in links:     link1 = (link.ref_name, link.ref_start, link.ref_end)     link2 = (link.query_name, link.query_start, link.query_end)     gv.add_link(link1, link2, curve=True)  # Add subtracks to top track for plotting 'GC content' &amp; 'GC skew' gv.top_track.add_subtrack(ratio=0.8) gv.top_track.add_subtrack(ratio=0.8)  # Create figure fig = gv.plotfig()  # Calculate GC content of top track genome pos_list, gc_content_list = gbk_list[0].calc_gc_content() pos_list += gv.top_track.offset  # Offset is required if align_type is not 'left' # Plot GC content for top track gc_content_ax = gv.top_track.subtracks[0].ax gc_content_ax.set_ylim(bottom=0, top=max(gc_content_list)) gc_content_ax.fill_between(pos_list, gc_content_list, alpha=0.2, color=\"blue\") gc_content_ax.text(gv.top_track.offset, max(gc_content_list) / 2, \"GC(%) \", ha=\"right\", va=\"center\", color=\"blue\")  # Calculate GC skew of top track genome pos_list, gc_skew_list = gbk_list[0].calc_gc_skew() pos_list += gv.top_track.offset  # Offset is required if align_type is not 'left' gc_skew_abs_max = max(abs(gc_skew_list)) # Plot GC skew for top track gc_skew_ax = gv.top_track.subtracks[1].ax gc_skew_ax.set_ylim(bottom=-gc_skew_abs_max, top=gc_skew_abs_max) gc_skew_ax.fill_between(pos_list, gc_skew_list, alpha=0.2, color=\"red\") _ = gc_skew_ax.text(gv.top_track.offset, 0, \"GC skew \", ha=\"right\", va=\"center\", color=\"red\") In\u00a0[3]: Copied! <pre>from pygenomeviz import Genbank, GenomeViz, load_example_dataset\n\ngv = GenomeViz(\n    fig_track_height=0.8,\n    feature_track_ratio=0.3,\n    link_track_ratio=1.0,\n    tick_track_ratio=0.3,\n    align_type=\"left\",\n    tick_style=\"axis\",\n)\n\n# Add features from genbank file\ngbk_files, links = load_example_dataset(\"escherichia_phage\")\ngbk_list = [Genbank(f) for f in gbk_files]\nfor gbk in gbk_list:\n    track = gv.add_feature_track(gbk.name, gbk.range_size)\n    track.add_genbank_features(gbk, plotstyle=\"arrow\", facecolor=\"skyblue\", linewidth=0.5, arrow_shaft_ratio=1.0)\n\n# Add links\nmin_identity = int(min([link.identity for link in links]))\nfor link in links:\n    link1 = (link.ref_name, link.ref_start, link.ref_end)\n    link2 = (link.query_name, link.query_start, link.query_end)\n    gv.add_link(link1, link2, v=link.identity, vmin=min_identity, curve=True)\n\n# Create figure\nfig = gv.plotfig()\n\n# Add label annotation to top track\nregions = ((\"Region A\", 15000, 28000), (\"Region B\", 30000, 40000))  # (label, start, end)\nfor region in regions:\n    label, start, end = region[0], region[1] + gv.top_track.offset, region[2] + gv.top_track.offset\n    center = int((start + end) / 2)\n    gv.top_track.ax.hlines(1.5, start, end, colors=\"black\", linewidth=1, linestyles=\"dashed\", clip_on=False)\n    gv.top_track.ax.text(center, 2.0, label, fontsize=15, ha=\"center\", va=\"bottom\")\n\n# Add box annotation to 'MH816966' track\ntarget_track = gv.get_track(\"MH816966\")\nbox_xmin, box_xmax = 10000, 20000\nbox_xmin += target_track.offset  # Offset is required if align_type is not 'left'\nbox_xmax += target_track.offset\nx, y = (box_xmin, box_xmin, box_xmax, box_xmax), (1, -1, -1, 1)\ntarget_track.ax.fill(x, y, fc=\"lime\", linewidth=0, alpha=0.5, zorder=-10)\n\n# Add colorbar annotation for similarity comparison links\ngv.set_colorbar(fig, vmin=min_identity)\n</pre> from pygenomeviz import Genbank, GenomeViz, load_example_dataset  gv = GenomeViz(     fig_track_height=0.8,     feature_track_ratio=0.3,     link_track_ratio=1.0,     tick_track_ratio=0.3,     align_type=\"left\",     tick_style=\"axis\", )  # Add features from genbank file gbk_files, links = load_example_dataset(\"escherichia_phage\") gbk_list = [Genbank(f) for f in gbk_files] for gbk in gbk_list:     track = gv.add_feature_track(gbk.name, gbk.range_size)     track.add_genbank_features(gbk, plotstyle=\"arrow\", facecolor=\"skyblue\", linewidth=0.5, arrow_shaft_ratio=1.0)  # Add links min_identity = int(min([link.identity for link in links])) for link in links:     link1 = (link.ref_name, link.ref_start, link.ref_end)     link2 = (link.query_name, link.query_start, link.query_end)     gv.add_link(link1, link2, v=link.identity, vmin=min_identity, curve=True)  # Create figure fig = gv.plotfig()  # Add label annotation to top track regions = ((\"Region A\", 15000, 28000), (\"Region B\", 30000, 40000))  # (label, start, end) for region in regions:     label, start, end = region[0], region[1] + gv.top_track.offset, region[2] + gv.top_track.offset     center = int((start + end) / 2)     gv.top_track.ax.hlines(1.5, start, end, colors=\"black\", linewidth=1, linestyles=\"dashed\", clip_on=False)     gv.top_track.ax.text(center, 2.0, label, fontsize=15, ha=\"center\", va=\"bottom\")  # Add box annotation to 'MH816966' track target_track = gv.get_track(\"MH816966\") box_xmin, box_xmax = 10000, 20000 box_xmin += target_track.offset  # Offset is required if align_type is not 'left' box_xmax += target_track.offset x, y = (box_xmin, box_xmin, box_xmax, box_xmax), (1, -1, -1, 1) target_track.ax.fill(x, y, fc=\"lime\", linewidth=0, alpha=0.5, zorder=-10)  # Add colorbar annotation for similarity comparison links gv.set_colorbar(fig, vmin=min_identity)  In\u00a0[4]: Copied! <pre>from pygenomeviz import Genbank, GenomeViz, load_example_dataset\nfrom matplotlib.lines import Line2D\nfrom matplotlib.patches import Patch \n\ngv = GenomeViz(\n    fig_track_height=0.8,\n    feature_track_ratio=0.3,\n    link_track_ratio=1.0,\n    tick_track_ratio=0.3,\n    align_type=\"center\",\n    tick_style=\"bar\",\n)\n\n# Add features from genbank file\ngbk_files, links = load_example_dataset(\"escherichia_phage\")\ngbk_list = [Genbank(f) for f in gbk_files]\nfor gbk in gbk_list:\n    track = gv.add_feature_track(gbk.name, gbk.range_size)\n    track.add_genbank_features(gbk, plotstyle=\"arrow\", facecolor=\"skyblue\", linewidth=0.5, arrow_shaft_ratio=1.0)\n\n# Add links\nmin_identity = int(min([link.identity for link in links]))\nfor link in links:\n    link1 = (link.ref_name, link.ref_start, link.ref_end)\n    link2 = (link.query_name, link.query_start, link.query_end)\n    gv.add_link(link1, link2, v=link.identity, vmin=min_identity, curve=True)\n\n# Create figure\nfig = gv.plotfig()\n\n# Add Legends (Maybe there is a better way)\nhandles = [\n    Line2D([], [], marker=\"&gt;\", color=\"skyblue\", label=\"CDS\", ms=10, ls=\"none\"),\n    Patch(color=\"grey\", label=\"Normal Link\"),\n    Patch(color=\"red\", label=\"Inverted Link\"),\n]\nlegend = fig.legend(handles=handles, bbox_to_anchor=(1, 1))\n\n# Add colorbar annotation for similarity comparison links\ngv.set_colorbar(fig, vmin=min_identity)\n</pre> from pygenomeviz import Genbank, GenomeViz, load_example_dataset from matplotlib.lines import Line2D from matplotlib.patches import Patch   gv = GenomeViz(     fig_track_height=0.8,     feature_track_ratio=0.3,     link_track_ratio=1.0,     tick_track_ratio=0.3,     align_type=\"center\",     tick_style=\"bar\", )  # Add features from genbank file gbk_files, links = load_example_dataset(\"escherichia_phage\") gbk_list = [Genbank(f) for f in gbk_files] for gbk in gbk_list:     track = gv.add_feature_track(gbk.name, gbk.range_size)     track.add_genbank_features(gbk, plotstyle=\"arrow\", facecolor=\"skyblue\", linewidth=0.5, arrow_shaft_ratio=1.0)  # Add links min_identity = int(min([link.identity for link in links])) for link in links:     link1 = (link.ref_name, link.ref_start, link.ref_end)     link2 = (link.query_name, link.query_start, link.query_end)     gv.add_link(link1, link2, v=link.identity, vmin=min_identity, curve=True)  # Create figure fig = gv.plotfig()  # Add Legends (Maybe there is a better way) handles = [     Line2D([], [], marker=\"&gt;\", color=\"skyblue\", label=\"CDS\", ms=10, ls=\"none\"),     Patch(color=\"grey\", label=\"Normal Link\"),     Patch(color=\"red\", label=\"Inverted Link\"), ] legend = fig.legend(handles=handles, bbox_to_anchor=(1, 1))  # Add colorbar annotation for similarity comparison links gv.set_colorbar(fig, vmin=min_identity)"},{"location":"api-examples/customization_tips/#1-add-subtracks","title":"1. Add Subtracks\u00b6","text":"<ul> <li>GC Content subtrack</li> <li>GC skew subtrack</li> </ul>"},{"location":"api-examples/customization_tips/#2-add-annotations","title":"2. Add Annotations\u00b6","text":""},{"location":"api-examples/customization_tips/#3-add-legends","title":"3. Add Legends\u00b6","text":""},{"location":"api-examples/gallery_example/","title":"Gallery Example","text":"In\u00a0[1]: Copied! <pre># %pip install pygenomeviz\n</pre> # %pip install pygenomeviz In\u00a0[2]: Copied! <pre>from pygenomeviz import Genbank, GenomeViz, load_example_dataset\n\ngv = GenomeViz(\n    fig_width=12,\n    feature_track_ratio=0.4,\n    align_type=\"center\",\n)\n\ngbk_files, links = load_example_dataset(\"escherichia_phage\")\nfor gbk_file in gbk_files:\n    gbk = Genbank(gbk_file)\n    track = gv.add_feature_track(gbk.name, gbk.range_size)\n    track.add_genbank_features(gbk, size_ratio=0.5, arrow_shaft_ratio=1.0, linewidth=0.5)\n\nfor link in links:\n    link_data1 = (link.ref_name, link.ref_start, link.ref_end)\n    link_data2 = (link.query_name, link.query_start, link.query_end)\n    gv.add_link(link_data1, link_data2, curve=True)\n\nfig = gv.plotfig()\n</pre> from pygenomeviz import Genbank, GenomeViz, load_example_dataset  gv = GenomeViz(     fig_width=12,     feature_track_ratio=0.4,     align_type=\"center\", )  gbk_files, links = load_example_dataset(\"escherichia_phage\") for gbk_file in gbk_files:     gbk = Genbank(gbk_file)     track = gv.add_feature_track(gbk.name, gbk.range_size)     track.add_genbank_features(gbk, size_ratio=0.5, arrow_shaft_ratio=1.0, linewidth=0.5)  for link in links:     link_data1 = (link.ref_name, link.ref_start, link.ref_end)     link_data2 = (link.query_name, link.query_start, link.query_end)     gv.add_link(link_data1, link_data2, curve=True)  fig = gv.plotfig() In\u00a0[3]: Copied! <pre>from pygenomeviz import Genbank, GenomeViz, load_example_dataset\n\ngv = GenomeViz(\n    fig_width=12,\n    fig_track_height=0.7,\n    feature_track_ratio=0.5,\n    tick_track_ratio=0.3,\n    tick_style=\"axis\",\n    tick_labelsize=10,\n)\n\ngbk_files, links = load_example_dataset(\"erwinia_phage\")\ngbk_list = [Genbank(gbk_file) for gbk_file in gbk_files]\nfor gbk in gbk_list:\n    track = gv.add_feature_track(gbk.name, gbk.range_size, labelsize=15)\n    track.add_genbank_features(gbk, plotstyle=\"arrow\")\n\nmin_identity = int(min(link.identity for link in links))\nfor link in links:\n    link_data1 = (link.ref_name, link.ref_start, link.ref_end)\n    link_data2 = (link.query_name, link.query_start, link.query_end)\n    gv.add_link(link_data1, link_data2, v=link.identity, vmin=min_identity)\n\n# Add subtracks to top track for plotting 'GC content' &amp; 'GC skew'\ngv.top_track.add_subtrack(ratio=0.7)\ngv.top_track.add_subtrack(ratio=0.7)\n\nfig = gv.plotfig()\n\n# Add label annotation to top track\ntop_track = gv.top_track  # or, gv.get_track(\"MT939486\") or gv.get_tracks()[0]\nlabel, start, end = \"Inverted\", 310000 + top_track.offset, 358000 + top_track.offset\ncenter = int((start + end) / 2)\ntop_track.ax.hlines(1.5, start, end, colors=\"red\", linewidth=1, linestyles=\"dashed\", clip_on=False)\ntop_track.ax.text(center, 2.0, label, fontsize=12, color=\"red\", ha=\"center\", va=\"bottom\")\n\n# Add fillbox to top track\nx, y = (start, start, end, end), (1, -1, -1, 1)\ntop_track.ax.fill(x, y, fc=\"lime\", linewidth=0, alpha=0.1, zorder=-10)\n\n# Plot GC content for top track\npos_list, gc_content_list = gbk_list[0].calc_gc_content()\npos_list += gv.top_track.offset  # Offset is required if align_type is not 'left'\ngc_content_ax = gv.top_track.subtracks[0].ax\ngc_content_ax.set_ylim(bottom=0, top=max(gc_content_list))\ngc_content_ax.fill_between(pos_list, gc_content_list, alpha=0.2, color=\"blue\")\ngc_content_ax.text(gv.top_track.offset, max(gc_content_list) / 2, \"GC(%) \", ha=\"right\", va=\"center\", color=\"blue\")\n\n# Plot GC skew for top track\npos_list, gc_skew_list = gbk_list[0].calc_gc_skew()\npos_list += gv.top_track.offset  # Offset is required if align_type is not 'left'\ngc_skew_abs_max = max(abs(gc_skew_list))\ngc_skew_ax = gv.top_track.subtracks[1].ax \ngc_skew_ax.set_ylim(bottom=-gc_skew_abs_max, top=gc_skew_abs_max)\ngc_skew_ax.fill_between(pos_list, gc_skew_list, alpha=0.2, color=\"red\")\ngc_skew_ax.text(gv.top_track.offset, 0, \"GC skew \", ha=\"right\", va=\"center\", color=\"red\")\n\n# Set colorbar for link\ngv.set_colorbar(fig, vmin=min_identity)\n</pre> from pygenomeviz import Genbank, GenomeViz, load_example_dataset  gv = GenomeViz(     fig_width=12,     fig_track_height=0.7,     feature_track_ratio=0.5,     tick_track_ratio=0.3,     tick_style=\"axis\",     tick_labelsize=10, )  gbk_files, links = load_example_dataset(\"erwinia_phage\") gbk_list = [Genbank(gbk_file) for gbk_file in gbk_files] for gbk in gbk_list:     track = gv.add_feature_track(gbk.name, gbk.range_size, labelsize=15)     track.add_genbank_features(gbk, plotstyle=\"arrow\")  min_identity = int(min(link.identity for link in links)) for link in links:     link_data1 = (link.ref_name, link.ref_start, link.ref_end)     link_data2 = (link.query_name, link.query_start, link.query_end)     gv.add_link(link_data1, link_data2, v=link.identity, vmin=min_identity)  # Add subtracks to top track for plotting 'GC content' &amp; 'GC skew' gv.top_track.add_subtrack(ratio=0.7) gv.top_track.add_subtrack(ratio=0.7)  fig = gv.plotfig()  # Add label annotation to top track top_track = gv.top_track  # or, gv.get_track(\"MT939486\") or gv.get_tracks()[0] label, start, end = \"Inverted\", 310000 + top_track.offset, 358000 + top_track.offset center = int((start + end) / 2) top_track.ax.hlines(1.5, start, end, colors=\"red\", linewidth=1, linestyles=\"dashed\", clip_on=False) top_track.ax.text(center, 2.0, label, fontsize=12, color=\"red\", ha=\"center\", va=\"bottom\")  # Add fillbox to top track x, y = (start, start, end, end), (1, -1, -1, 1) top_track.ax.fill(x, y, fc=\"lime\", linewidth=0, alpha=0.1, zorder=-10)  # Plot GC content for top track pos_list, gc_content_list = gbk_list[0].calc_gc_content() pos_list += gv.top_track.offset  # Offset is required if align_type is not 'left' gc_content_ax = gv.top_track.subtracks[0].ax gc_content_ax.set_ylim(bottom=0, top=max(gc_content_list)) gc_content_ax.fill_between(pos_list, gc_content_list, alpha=0.2, color=\"blue\") gc_content_ax.text(gv.top_track.offset, max(gc_content_list) / 2, \"GC(%) \", ha=\"right\", va=\"center\", color=\"blue\")  # Plot GC skew for top track pos_list, gc_skew_list = gbk_list[0].calc_gc_skew() pos_list += gv.top_track.offset  # Offset is required if align_type is not 'left' gc_skew_abs_max = max(abs(gc_skew_list)) gc_skew_ax = gv.top_track.subtracks[1].ax  gc_skew_ax.set_ylim(bottom=-gc_skew_abs_max, top=gc_skew_abs_max) gc_skew_ax.fill_between(pos_list, gc_skew_list, alpha=0.2, color=\"red\") gc_skew_ax.text(gv.top_track.offset, 0, \"GC skew \", ha=\"right\", va=\"center\", color=\"red\")  # Set colorbar for link gv.set_colorbar(fig, vmin=min_identity) In\u00a0[4]: Copied! <pre>from matplotlib.lines import Line2D\nfrom matplotlib.patches import Patch\n\nfrom pygenomeviz import Genbank, GenomeViz, load_example_dataset\n\ngv = GenomeViz(\n    fig_width=10,\n    fig_track_height=0.5,\n    feature_track_ratio=0.5,\n    tick_track_ratio=0.5,\n    align_type=\"center\",\n    tick_style=\"bar\",\n    tick_labelsize=10,\n)\n\ngbk_files, links = load_example_dataset(\"enterobacteria_phage\")\nfor idx, gbk_file in enumerate(gbk_files):\n    gbk = Genbank(gbk_file)\n    track = gv.add_feature_track(gbk.name, gbk.range_size, labelsize=10)\n    track.add_genbank_features(\n        gbk,\n        label_type=\"product\" if idx == 0 else None,  # Labeling only top track\n        label_handle_func=lambda s : \"\" if s.startswith(\"hypothetical\") else s,  # Ignore 'hypothetical ~~~' label\n        labelsize=8,\n        labelvpos=\"top\",\n        facecolor=\"skyblue\",\n        linewidth=0.5,\n        labelrotation=45,\n    )\n\nnormal_color, inverted_color, alpha = \"chocolate\", \"limegreen\", 0.5\nmin_identity = int(min(link.identity for link in links))\nfor link in links:\n    link_data1 = (link.ref_name, link.ref_start, link.ref_end)\n    link_data2 = (link.query_name, link.query_start, link.query_end)\n    gv.add_link(link_data1, link_data2, normal_color, inverted_color, alpha, v=link.identity, vmin=min_identity, curve=True)\n\nfig = gv.plotfig()\n\n# Add Legends (Maybe there is a better way)\nhandles = [\n    Line2D([], [], marker=\"&gt;\", color=\"skyblue\", label=\"CDS\", ms=10, ls=\"none\"),\n    Patch(color=normal_color, label=\"Normal Link\"),\n    Patch(color=inverted_color, label=\"Inverted Link\"),\n]\nfig.legend(handles=handles, bbox_to_anchor=(1, 1))\n\n# Set colorbar for link\ngv.set_colorbar(fig, bar_colors=[normal_color, inverted_color], alpha=alpha, vmin=min_identity, bar_height=0.25, bar_label=\"Identity\", bar_labelsize=10)\n</pre> from matplotlib.lines import Line2D from matplotlib.patches import Patch  from pygenomeviz import Genbank, GenomeViz, load_example_dataset  gv = GenomeViz(     fig_width=10,     fig_track_height=0.5,     feature_track_ratio=0.5,     tick_track_ratio=0.5,     align_type=\"center\",     tick_style=\"bar\",     tick_labelsize=10, )  gbk_files, links = load_example_dataset(\"enterobacteria_phage\") for idx, gbk_file in enumerate(gbk_files):     gbk = Genbank(gbk_file)     track = gv.add_feature_track(gbk.name, gbk.range_size, labelsize=10)     track.add_genbank_features(         gbk,         label_type=\"product\" if idx == 0 else None,  # Labeling only top track         label_handle_func=lambda s : \"\" if s.startswith(\"hypothetical\") else s,  # Ignore 'hypothetical ~~~' label         labelsize=8,         labelvpos=\"top\",         facecolor=\"skyblue\",         linewidth=0.5,         labelrotation=45,     )  normal_color, inverted_color, alpha = \"chocolate\", \"limegreen\", 0.5 min_identity = int(min(link.identity for link in links)) for link in links:     link_data1 = (link.ref_name, link.ref_start, link.ref_end)     link_data2 = (link.query_name, link.query_start, link.query_end)     gv.add_link(link_data1, link_data2, normal_color, inverted_color, alpha, v=link.identity, vmin=min_identity, curve=True)  fig = gv.plotfig()  # Add Legends (Maybe there is a better way) handles = [     Line2D([], [], marker=\"&gt;\", color=\"skyblue\", label=\"CDS\", ms=10, ls=\"none\"),     Patch(color=normal_color, label=\"Normal Link\"),     Patch(color=inverted_color, label=\"Inverted Link\"), ] fig.legend(handles=handles, bbox_to_anchor=(1, 1))  # Set colorbar for link gv.set_colorbar(fig, bar_colors=[normal_color, inverted_color], alpha=alpha, vmin=min_identity, bar_height=0.25, bar_label=\"Identity\", bar_labelsize=10) In\u00a0[5]: Copied! <pre>from pygenomeviz import Genbank, GenomeViz, load_example_dataset\n\ngv = GenomeViz(\n    fig_width=10,\n    fig_track_height=0.5,\n    feature_track_ratio=0.3,\n    tick_track_ratio=0.3,\n    align_type=\"center\",\n    tick_style=\"bar\",\n    tick_labelsize=10,\n)\n\ngbk_files, links = load_example_dataset(\"mycoplasma_gallisepticum\")\nfor gbk_file in gbk_files:\n    gbk = Genbank(gbk_file)\n    track = gv.add_feature_track(gbk.name, gbk.range_size, labelsize=12)\n    track.add_genbank_features(gbk, plotstyle=\"rbox\")\n\nfor link in links:\n    link_data1 = (link.ref_name, link.ref_start, link.ref_end)\n    link_data2 = (link.query_name, link.query_start, link.query_end)\n    gv.add_link(link_data1, link_data2, normal_color=\"blue\", curve=True)\n\nfig = gv.plotfig()\n</pre> from pygenomeviz import Genbank, GenomeViz, load_example_dataset  gv = GenomeViz(     fig_width=10,     fig_track_height=0.5,     feature_track_ratio=0.3,     tick_track_ratio=0.3,     align_type=\"center\",     tick_style=\"bar\",     tick_labelsize=10, )  gbk_files, links = load_example_dataset(\"mycoplasma_gallisepticum\") for gbk_file in gbk_files:     gbk = Genbank(gbk_file)     track = gv.add_feature_track(gbk.name, gbk.range_size, labelsize=12)     track.add_genbank_features(gbk, plotstyle=\"rbox\")  for link in links:     link_data1 = (link.ref_name, link.ref_start, link.ref_end)     link_data2 = (link.query_name, link.query_start, link.query_end)     gv.add_link(link_data1, link_data2, normal_color=\"blue\", curve=True)  fig = gv.plotfig() In\u00a0[6]: Copied! <pre>from pygenomeviz import Genbank, GenomeViz, load_example_dataset\n\ngv = GenomeViz(\n    fig_width=10,\n    fig_track_height=0.5,\n    feature_track_ratio=0.3,\n    tick_track_ratio=0.3,\n    align_type=\"center\",\n    tick_style=\"bar\",\n    tick_labelsize=10,\n    # Lowerling 'plot_size_thr' will display more features on track\n    # This parameter is used for reducing rendering time of large genome dataset\n    # In most cases, displaying all features in large genome will result in bad figure\n    plot_size_thr=0.0005,\n)\n\ngbk_files, links = load_example_dataset(\"escherichia_coli\")\nfor gbk_file in gbk_files:\n    gbk = Genbank(gbk_file)\n    track = gv.add_feature_track(gbk.name, gbk.range_size, labelsize=12)\n    track.add_genbank_features(gbk, plotstyle=\"box\")\n\nfor link in links:\n    link_data1 = (link.ref_name, link.ref_start, link.ref_end)\n    link_data2 = (link.query_name, link.query_start, link.query_end)\n    gv.add_link(link_data1, link_data2)\n\nfig = gv.plotfig()\n</pre> from pygenomeviz import Genbank, GenomeViz, load_example_dataset  gv = GenomeViz(     fig_width=10,     fig_track_height=0.5,     feature_track_ratio=0.3,     tick_track_ratio=0.3,     align_type=\"center\",     tick_style=\"bar\",     tick_labelsize=10,     # Lowerling 'plot_size_thr' will display more features on track     # This parameter is used for reducing rendering time of large genome dataset     # In most cases, displaying all features in large genome will result in bad figure     plot_size_thr=0.0005, )  gbk_files, links = load_example_dataset(\"escherichia_coli\") for gbk_file in gbk_files:     gbk = Genbank(gbk_file)     track = gv.add_feature_track(gbk.name, gbk.range_size, labelsize=12)     track.add_genbank_features(gbk, plotstyle=\"box\")  for link in links:     link_data1 = (link.ref_name, link.ref_start, link.ref_end)     link_data2 = (link.query_name, link.query_start, link.query_end)     gv.add_link(link_data1, link_data2)  fig = gv.plotfig()"},{"location":"api-examples/gallery_example/#1-escherichia-phage","title":"1. Escherichia phage\u00b6","text":""},{"location":"api-examples/gallery_example/#2-erwinia-phage","title":"2. Erwinia phage\u00b6","text":""},{"location":"api-examples/gallery_example/#3-enterobacteria-phage","title":"3. Enterobacteria phage\u00b6","text":""},{"location":"api-examples/gallery_example/#4-mycoplasma-gallisepticum","title":"4. Mycoplasma gallisepticum\u00b6","text":""},{"location":"api-examples/gallery_example/#5-escherichia-coli","title":"5. Escherichia coli\u00b6","text":""},{"location":"api-examples/practical_example/","title":"Practical Example","text":"In\u00a0[1]: Copied! <pre># %pip install pygenomeviz\n</pre> # %pip install pygenomeviz In\u00a0[2]: Copied! <pre>from pygenomeviz import Genbank, GenomeViz, load_example_dataset\n\n# Load genbank file\ngbk_files, _ = load_example_dataset(\"escherichia_phage\")\ngbk = Genbank(gbk_files[0])\n\n# Plot genbank features\ngv = GenomeViz(fig_track_height=0.5, tick_style=\"axis\")\ntrack = gv.add_feature_track(gbk.name, gbk.range_size)\ntrack.add_genbank_features(gbk)\nfig = gv.plotfig()\n</pre> from pygenomeviz import Genbank, GenomeViz, load_example_dataset  # Load genbank file gbk_files, _ = load_example_dataset(\"escherichia_phage\") gbk = Genbank(gbk_files[0])  # Plot genbank features gv = GenomeViz(fig_track_height=0.5, tick_style=\"axis\") track = gv.add_feature_track(gbk.name, gbk.range_size) track.add_genbank_features(gbk) fig = gv.plotfig() In\u00a0[3]: Copied! <pre>from pygenomeviz import Genbank, GenomeViz, load_example_dataset\n\n# Load genbank file (Set target min-max range)\ngbk_files, _ = load_example_dataset(\"escherichia_phage\")\ngbk = Genbank(gbk_files[0], min_range=10000, max_range=25000)\n\n# Plot min-max range genbank features\ngv = GenomeViz()\ntrack = gv.add_feature_track(name=gbk.name, size=gbk.range_size, start_pos=gbk.min_range)\ntrack.add_genbank_features(gbk, label_type=\"protein_id\", plotstyle=\"arrow\", facecolor=\"skyblue\", labelsize=10, linewidth=1)\ntrack.set_sublabel(position=\"top-left\")\nfig = gv.plotfig()\n</pre> from pygenomeviz import Genbank, GenomeViz, load_example_dataset  # Load genbank file (Set target min-max range) gbk_files, _ = load_example_dataset(\"escherichia_phage\") gbk = Genbank(gbk_files[0], min_range=10000, max_range=25000)  # Plot min-max range genbank features gv = GenomeViz() track = gv.add_feature_track(name=gbk.name, size=gbk.range_size, start_pos=gbk.min_range) track.add_genbank_features(gbk, label_type=\"protein_id\", plotstyle=\"arrow\", facecolor=\"skyblue\", labelsize=10, linewidth=1) track.set_sublabel(position=\"top-left\") fig = gv.plotfig() In\u00a0[4]: Copied! <pre>from pygenomeviz import Genbank, GenomeViz, load_example_dataset\n\n# Load genbank file\ngbk_files, _ = load_example_dataset(\"escherichia_phage\")\ngbk = Genbank(gbk_files[0])\n\n# Plot genbank features with `product` label (Exclude`hypothetical ~~~` label)\ngv = GenomeViz(fig_track_height=0.5, tick_style=\"bar\")\ntrack = gv.add_feature_track(name=gbk.name, size=gbk.range_size)\ntrack.add_genbank_features(\n    gbk,\n    label_type=\"product\",\n    # Show only product labels that don't startswith `hypothetical` \n    label_handle_func=lambda s: \"\" if s.startswith(\"hypothetical\") else s,\n    labelvpos=\"top\",\n    facecolor=\"skyblue\",\n    # If label startswith `hypothetical`, facecolor=\"grey\"; if not facecolor=\"orange\"\n    facecolor_handle_func=lambda f: \"grey\" if f.qualifiers.get(\"product\", [\"\"])[0].startswith(\"hypothetical\") else \"orange\",\n    labelsize=10,\n    linewidth=0.5,\n)\ntrack.set_sublabel(text=f\"{gbk.max_range} bp\", ymargin=1.0)\nfig = gv.plotfig()\n</pre> from pygenomeviz import Genbank, GenomeViz, load_example_dataset  # Load genbank file gbk_files, _ = load_example_dataset(\"escherichia_phage\") gbk = Genbank(gbk_files[0])  # Plot genbank features with `product` label (Exclude`hypothetical ~~~` label) gv = GenomeViz(fig_track_height=0.5, tick_style=\"bar\") track = gv.add_feature_track(name=gbk.name, size=gbk.range_size) track.add_genbank_features(     gbk,     label_type=\"product\",     # Show only product labels that don't startswith `hypothetical`      label_handle_func=lambda s: \"\" if s.startswith(\"hypothetical\") else s,     labelvpos=\"top\",     facecolor=\"skyblue\",     # If label startswith `hypothetical`, facecolor=\"grey\"; if not facecolor=\"orange\"     facecolor_handle_func=lambda f: \"grey\" if f.qualifiers.get(\"product\", [\"\"])[0].startswith(\"hypothetical\") else \"orange\",     labelsize=10,     linewidth=0.5, ) track.set_sublabel(text=f\"{gbk.max_range} bp\", ymargin=1.0) fig = gv.plotfig()  In\u00a0[5]: Copied! <pre>from pygenomeviz import Gff, GenomeViz, load_example_gff\n\n# Load GFF file\ngff_file = load_example_gff(\"enterobacteria_phage.gff\")\ngff = Gff(gff_file)\n\n# Plot GFF features\ngv = GenomeViz(fig_track_height=0.7)\ntrack = gv.add_feature_track(name=gff.name, size=gff.range_size)\ntrack.add_gff_features(gff, plotstyle=\"arrow\", facecolor=\"tomato\")\n\nfig = gv.plotfig()\n</pre> from pygenomeviz import Gff, GenomeViz, load_example_gff  # Load GFF file gff_file = load_example_gff(\"enterobacteria_phage.gff\") gff = Gff(gff_file)  # Plot GFF features gv = GenomeViz(fig_track_height=0.7) track = gv.add_feature_track(name=gff.name, size=gff.range_size) track.add_gff_features(gff, plotstyle=\"arrow\", facecolor=\"tomato\")  fig = gv.plotfig() In\u00a0[6]: Copied! <pre>from pygenomeviz import Gff, GenomeViz, load_example_gff\n\n# Load gzipped GFF file (Set target min-max range)\ngff_file = load_example_gff(\"escherichia_coli.gff.gz\")\ngff = Gff(gff_file, min_range=215000, max_range=230000)\n\n# Plot min-max range `CDS`, `rRNA` type features\ngv = GenomeViz(fig_track_height=0.7, tick_style=\"bar\")\ntrack = gv.add_feature_track(name=gff.name, size=gff.range_size, start_pos=gff.min_range, labelsize=0)\ntrack.add_gff_features(gff, feature_type=\"CDS\", facecolor=\"skyblue\", linewidth=0.5, label_type=\"gene\", labelvpos=\"top\")\ntrack.add_gff_features(gff, feature_type=\"rRNA\", facecolor=\"lime\", linewidth=0.5, label_type=\"product\", labelvpos=\"top\", patch_kws=dict(hatch=\"/\"))\ntrack.set_sublabel(f\"{gff.name}\\n\\n{gff.min_range} - {gff.max_range} bp\", ymargin=1.0)\n\nfig = gv.plotfig()\n</pre> from pygenomeviz import Gff, GenomeViz, load_example_gff  # Load gzipped GFF file (Set target min-max range) gff_file = load_example_gff(\"escherichia_coli.gff.gz\") gff = Gff(gff_file, min_range=215000, max_range=230000)  # Plot min-max range `CDS`, `rRNA` type features gv = GenomeViz(fig_track_height=0.7, tick_style=\"bar\") track = gv.add_feature_track(name=gff.name, size=gff.range_size, start_pos=gff.min_range, labelsize=0) track.add_gff_features(gff, feature_type=\"CDS\", facecolor=\"skyblue\", linewidth=0.5, label_type=\"gene\", labelvpos=\"top\") track.add_gff_features(gff, feature_type=\"rRNA\", facecolor=\"lime\", linewidth=0.5, label_type=\"product\", labelvpos=\"top\", patch_kws=dict(hatch=\"/\")) track.set_sublabel(f\"{gff.name}\\n\\n{gff.min_range} - {gff.max_range} bp\", ymargin=1.0)  fig = gv.plotfig() In\u00a0[7]: Copied! <pre>from pygenomeviz import Gff, GenomeViz, load_example_gff\nfrom Bio.SeqFeature import SeqFeature\n\n# Load gzipped GFF file (Set target min-max range)\ngff_file = load_example_gff(\"escherichia_coli.gff.gz\")\ngff = Gff(gff_file, min_range=50000, max_range=80000)\n\n# Plot min-max range GFF features with sublabel\ngv = GenomeViz(fig_track_height=0.7, tick_style=\"bar\")\ntrack = gv.add_feature_track(name=\"E.coli\", size=gff.range_size, start_pos=gff.min_range)\ntrack.set_sublabel(ymargin=1.0)\n\ndef facecolor_handle_func(feature: SeqFeature) -&gt; str:\n    # Get gene name in GFF attributes column (e.g. `gene=araD;`)\n    gene_name = feature.qualifiers.get(\"gene\", [\"\"])[0]\n    # Set user-defined color based on gene name\n    if gene_name.startswith(\"ara\"):\n        return \"blue\"\n    elif gene_name.startswith(\"thi\"):\n        return \"lime\"\n    elif gene_name in (\"pdxA\", \"surA\", \"lptD\", \"djlA\", \"yabP\", \"yabQ\"):\n        return \"tomato\"\n    else:\n        return \"grey\"\n\ntrack.add_gff_features(gff, facecolor_handle_func=facecolor_handle_func, label_type=\"gene\", labelvpos=\"top\")\n\nfig = gv.plotfig()\n</pre> from pygenomeviz import Gff, GenomeViz, load_example_gff from Bio.SeqFeature import SeqFeature  # Load gzipped GFF file (Set target min-max range) gff_file = load_example_gff(\"escherichia_coli.gff.gz\") gff = Gff(gff_file, min_range=50000, max_range=80000)  # Plot min-max range GFF features with sublabel gv = GenomeViz(fig_track_height=0.7, tick_style=\"bar\") track = gv.add_feature_track(name=\"E.coli\", size=gff.range_size, start_pos=gff.min_range) track.set_sublabel(ymargin=1.0)  def facecolor_handle_func(feature: SeqFeature) -&gt; str:     # Get gene name in GFF attributes column (e.g. `gene=araD;`)     gene_name = feature.qualifiers.get(\"gene\", [\"\"])[0]     # Set user-defined color based on gene name     if gene_name.startswith(\"ara\"):         return \"blue\"     elif gene_name.startswith(\"thi\"):         return \"lime\"     elif gene_name in (\"pdxA\", \"surA\", \"lptD\", \"djlA\", \"yabP\", \"yabQ\"):         return \"tomato\"     else:         return \"grey\"  track.add_gff_features(gff, facecolor_handle_func=facecolor_handle_func, label_type=\"gene\", labelvpos=\"top\")  fig = gv.plotfig() In\u00a0[8]: Copied! <pre>from pygenomeviz import Genbank, GenomeViz, load_example_dataset\n\ngv = GenomeViz(link_track_ratio=3.0, tick_style=\"axis\")\n\ngbk_files, links = load_example_dataset(\"escherichia_phage\")\nfor gbk_file in gbk_files:\n    gbk = Genbank(gbk_file)\n    track = gv.add_feature_track(gbk.name, gbk.range_size)\n    track.add_genbank_features(gbk)\n\nfor link in links:\n    link_data1 = (link.ref_name, link.ref_start, link.ref_end)\n    link_data2 = (link.query_name, link.query_start, link.query_end)\n    gv.add_link(link_data1, link_data2)\n\nfig = gv.plotfig()\n</pre> from pygenomeviz import Genbank, GenomeViz, load_example_dataset  gv = GenomeViz(link_track_ratio=3.0, tick_style=\"axis\")  gbk_files, links = load_example_dataset(\"escherichia_phage\") for gbk_file in gbk_files:     gbk = Genbank(gbk_file)     track = gv.add_feature_track(gbk.name, gbk.range_size)     track.add_genbank_features(gbk)  for link in links:     link_data1 = (link.ref_name, link.ref_start, link.ref_end)     link_data2 = (link.query_name, link.query_start, link.query_end)     gv.add_link(link_data1, link_data2)  fig = gv.plotfig() In\u00a0[9]: Copied! <pre>from pygenomeviz import Genbank, GenomeViz, load_example_dataset\n\ngv = GenomeViz(\n    feature_track_ratio=0.4,\n    tick_track_ratio=0.5,\n    tick_style=\"bar\",\n    align_type=\"center\",\n)\n\ngbk_files, links = load_example_dataset(\"escherichia_phage\")\nfor gbk_file in gbk_files:\n    gbk = Genbank(gbk_file)\n    track = gv.add_feature_track(gbk.name, gbk.range_size, labelmargin=0.03)\n    track.add_genbank_features(gbk, plotstyle=\"rbox\", facecolor=\"limegreen\")\n    track.set_sublabel(text=f\"{gbk.max_range} bp\")\n\nnormal_color, inverted_color = \"skyblue\", \"tomato\"\nmin_identity = int(min(link.identity for link in links))\nfor link in links:\n    link_data1 = (link.ref_name, link.ref_start, link.ref_end)\n    link_data2 = (link.query_name, link.query_start, link.query_end)\n    gv.add_link(\n        link_data1,\n        link_data2,\n        normal_color=normal_color,\n        inverted_color=inverted_color,\n        v=link.identity,\n        vmin=min_identity,\n        curve=True,\n    )\n\nfig = gv.plotfig()\ngv.set_colorbar(fig, bar_colors=[normal_color, inverted_color], vmin=min_identity)\n</pre> from pygenomeviz import Genbank, GenomeViz, load_example_dataset  gv = GenomeViz(     feature_track_ratio=0.4,     tick_track_ratio=0.5,     tick_style=\"bar\",     align_type=\"center\", )  gbk_files, links = load_example_dataset(\"escherichia_phage\") for gbk_file in gbk_files:     gbk = Genbank(gbk_file)     track = gv.add_feature_track(gbk.name, gbk.range_size, labelmargin=0.03)     track.add_genbank_features(gbk, plotstyle=\"rbox\", facecolor=\"limegreen\")     track.set_sublabel(text=f\"{gbk.max_range} bp\")  normal_color, inverted_color = \"skyblue\", \"tomato\" min_identity = int(min(link.identity for link in links)) for link in links:     link_data1 = (link.ref_name, link.ref_start, link.ref_end)     link_data2 = (link.query_name, link.query_start, link.query_end)     gv.add_link(         link_data1,         link_data2,         normal_color=normal_color,         inverted_color=inverted_color,         v=link.identity,         vmin=min_identity,         curve=True,     )  fig = gv.plotfig() gv.set_colorbar(fig, bar_colors=[normal_color, inverted_color], vmin=min_identity)"},{"location":"api-examples/practical_example/#1-plot-genbank-file","title":"1. Plot Genbank File\u00b6","text":""},{"location":"api-examples/practical_example/#1-1-all-features","title":"1-1. All Features\u00b6","text":""},{"location":"api-examples/practical_example/#1-2-limited-range-features","title":"1-2. Limited Range Features\u00b6","text":""},{"location":"api-examples/practical_example/#1-3-user-defined-color-style","title":"1-3. User-defined Color Style\u00b6","text":""},{"location":"api-examples/practical_example/#2-plot-gff-file","title":"2. Plot GFF File\u00b6","text":""},{"location":"api-examples/practical_example/#2-1-all-features","title":"2-1. All Features\u00b6","text":""},{"location":"api-examples/practical_example/#2-2-limited-range-features","title":"2-2. Limited Range Features\u00b6","text":""},{"location":"api-examples/practical_example/#2-3-user-defined-color-style","title":"2-3. User-defined Color Style\u00b6","text":""},{"location":"api-examples/practical_example/#3-plot-genbank-files-links","title":"3. Plot Genbank Files &amp; Links\u00b6","text":""},{"location":"api-examples/practical_example/#3-1-example-1","title":"3-1. Example 1\u00b6","text":""},{"location":"api-examples/practical_example/#3-2-example-2","title":"3-2. Example 2\u00b6","text":""},{"location":"cli-docs/pgv-mmseqs/","title":"pgv-mmseqs CLI Document","text":"<p><code>pgv-mmseqs</code> is one of the CLI workflows in pyGenomeViz for visualization of homologous CDSs using MMseqs. It can be used to visualize reciprocal best-hit CDSs between each genome.</p> <p></p>"},{"location":"cli-docs/pgv-mmseqs/#installation","title":"Installation","text":"<p>Additional installation of MMseqs is required.</p>"},{"location":"cli-docs/pgv-mmseqs/#conda","title":"Conda","text":"<pre><code>conda install -c conda-forge -c bioconda pygenomeviz mmseqs2\n</code></pre>"},{"location":"cli-docs/pgv-mmseqs/#pip","title":"Pip","text":"<pre><code>pip install pygenomeviz\n</code></pre> <p>After pip installation, download MMseqs binary from release page and add PATH.</p>"},{"location":"cli-docs/pgv-mmseqs/#usage","title":"Usage","text":""},{"location":"cli-docs/pgv-mmseqs/#basic-command","title":"Basic Command","text":"<pre><code>pgv-mmseqs --gbk_resources seq1.gbk seq2.gbk seq3.gbk seq4.gbk -o mmseqs_example\n</code></pre>"},{"location":"cli-docs/pgv-mmseqs/#options","title":"Options","text":"<pre><code>General Options:\n  --gbk_resources IN [IN ...]  Input genome genbank file resources\n                               User can optionally specify genome range and reverse complement.\n                               - Example1. Set 100 - 1000 range 'file:100-1000'\n                               - Example2. Set reverse complement 'file::-1'\n                               - Example3. Set 100 - 1000 range of reverse complement 'file:100-1000:-1'\n  -o OUT, --outdir OUT         Output directory\n  --format  [ ...]             Output image format ('png'[*]|'jpg'|'svg'|'pdf'|`html`[*])\n  --reuse                      Reuse previous result if available\n  -v, --version                Print version information\n  -h, --help                   Show this help message and exit\n\nMMseqs Options:\n  -e , --evalue                MMseqs RBH search E-value parameter (Default: 1e-03)\n  --min_identity               Min-identity threshold to be plotted (Default: 0)\n  -t , --thread_num            Threads number parameter (Default: MaxThread - 1)\n\nFigure Appearence Options:\n  --fig_width                  Figure width (Default: 15)\n  --fig_track_height           Figure track height (Default: 1.0)\n  --feature_track_ratio        Feature track ratio (Default: 1.0)\n  --link_track_ratio           Link track ratio (Default: 5.0)\n  --tick_track_ratio           Tick track ratio (Default: 1.0)\n  --track_labelsize            Track label size (Default: 20)\n  --tick_labelsize             Tick label size (Default: 15)\n  --normal_link_color          Normal link color (Default: 'grey')\n  --inverted_link_color        Inverted link color (Default: 'red')\n  --align_type                 Figure tracks align type ('left'|'center'[*]|'right')\n  --tick_style                 Tick style ('bar'|'axis'|None[*])\n  --feature_plotstyle          Feature plot style ('bigarrow'[*]|'arrow')\n  --arrow_shaft_ratio          Feature arrow shaft ratio (Default: 0.5)\n  --feature_color              Feature color (Default: 'orange')\n  --feature_linewidth          Feature edge line width (Default: 0.0)\n  --colorbar_width             Colorbar width (Default: 0.01)\n  --colorbar_height            Colorbar height (Default: 0.2)\n  --curve                      Plot curved style link (Default: OFF)\n  --dpi                        Figure DPI (Default: 300)\n\n[*] marker means the default value.\n</code></pre>"},{"location":"cli-docs/pgv-mmseqs/#examples","title":"Examples","text":""},{"location":"cli-docs/pgv-mmseqs/#example-1","title":"Example 1","text":"<p>Download example dataset:</p> <p>Download four Erwinia phage genbank files</p> <pre><code>pgv-download-dataset -n erwinia_phage\n</code></pre> <p>Run CLI workflow:</p> <pre><code>pgv-mmseqs --gbk_resources MT939486.gbk MT939487.gbk MT939488.gbk LT960552.gbk \\\n           -o mmseqs_example1 --tick_style axis --align_type left --feature_plotstyle arrow\n</code></pre> <p> </p> mmseqs_example1/result.png"},{"location":"cli-docs/pgv-mmseqs/#example-2","title":"Example 2","text":"<p>Download example dataset:</p> <p>Download four Erwinia phage genbank files</p> <pre><code>pgv-download-dataset -n erwinia_phage\n</code></pre> <p>Run CLI workflow:</p> <p>Target range is specified (e.g. file:100-1000)</p> <pre><code>pgv-mmseqs --gbk_resources MT939486.gbk:250000-358115 MT939487.gbk:250000-355376 MT939488.gbk:250000-356948 LT960552.gbk:270000-340000 \\\n           -o mmseqs_example2 --tick_style bar --feature_plotstyle arrow\n</code></pre> <p> </p> mmseqs_example2/result.png"},{"location":"cli-docs/pgv-mmseqs/#example-3","title":"Example 3","text":"<p>Download example dataset:</p> <p>Download six Enterobacteria phage genbank files</p> <pre><code>pgv-download-dataset -n enterobacteria_phage\n</code></pre> <p>Run CLI workflow:</p> <pre><code>pgv-mmseqs --gbk_resources NC_019724.gbk NC_024783.gbk NC_016566.gbk NC_013600.gbk NC_031081.gbk NC_028901.gbk \\\n           -o mmseqs_example3 --fig_track_height 0.7 --feature_linewidth 0.3 --tick_style bar --curve \\\n           --normal_link_color chocolate --inverted_link_color limegreen --feature_color skyblue\n</code></pre> <p> </p> mmseqs_example3/result.png"},{"location":"cli-docs/pgv-mummer/","title":"pgv-mummer CLI Document","text":"<p><code>pgv-mummer</code> is one of the CLI workflows in pyGenomeViz for visualization of genome alignment using MUMmer.</p> <p></p>"},{"location":"cli-docs/pgv-mummer/#installation","title":"Installation","text":"<p>Additional installation of MUMmer is required.</p>"},{"location":"cli-docs/pgv-mummer/#conda","title":"Conda","text":"<pre><code>conda install -c conda-forge -c bioconda pygenomeviz mummer\n</code></pre>"},{"location":"cli-docs/pgv-mummer/#pip-ubuntu","title":"Pip (Ubuntu)","text":"<pre><code>pip install pygenomeviz\n</code></pre> <p>In Ubuntu, MUMmer can be installed with apt command below.</p> <pre><code>sudo apt install mummer\n</code></pre>"},{"location":"cli-docs/pgv-mummer/#usage","title":"Usage","text":""},{"location":"cli-docs/pgv-mummer/#basic-command","title":"Basic Command","text":"<pre><code>pgv-mummer --gbk_resources seq1.gbk seq2.gbk seq3.gbk seq4.gbk -o mummer_example\n</code></pre>"},{"location":"cli-docs/pgv-mummer/#options","title":"Options","text":"<pre><code>General Options:\n  --gbk_resources IN [IN ...]  Input genome genbank file resources\n                               User can optionally specify genome range and reverse complement.\n                               - Example1. Set 100 - 1000 range 'file:100-1000'\n                               - Example2. Set reverse complement 'file::-1'\n                               - Example3. Set 100 - 1000 range of reverse complement 'file:100-1000:-1'\n  -o OUT, --outdir OUT         Output directory\n  --format  [ ...]             Output image format ('png'[*]|'jpg'|'svg'|'pdf'|`html`[*])\n  --reuse                      Reuse previous result if available\n  -v, --version                Print version information\n  -h, --help                   Show this help message and exit\n\nMUMmer Alignment Options:\n  --seqtype                    MUMmer alignment sequence type ('protein'[*]|'nucleotide')\n  --min_length                 Min-length threshold to be plotted (Default: 0)\n  --min_identity               Min-identity threshold to be plotted (Default: 0)\n  -t , --thread_num            Threads number parameter (Default: MaxThread - 1)\n\nFigure Appearence Options:\n  --fig_width                  Figure width (Default: 15)\n  --fig_track_height           Figure track height (Default: 1.0)\n  --feature_track_ratio        Feature track ratio (Default: 1.0)\n  --link_track_ratio           Link track ratio (Default: 5.0)\n  --tick_track_ratio           Tick track ratio (Default: 1.0)\n  --track_labelsize            Track label size (Default: 20)\n  --tick_labelsize             Tick label size (Default: 15)\n  --normal_link_color          Normal link color (Default: 'grey')\n  --inverted_link_color        Inverted link color (Default: 'red')\n  --align_type                 Figure tracks align type ('left'|'center'[*]|'right')\n  --tick_style                 Tick style ('bar'|'axis'|None[*])\n  --feature_plotstyle          Feature plot style ('bigarrow'[*]|'arrow')\n  --arrow_shaft_ratio          Feature arrow shaft ratio (Default: 0.5)\n  --feature_color              Feature color (Default: 'orange')\n  --feature_linewidth          Feature edge line width (Default: 0.0)\n  --pseudo                     Show pseudogene feature\n  --pseudo_color               Pseudogene feature color (Default: 'grey')\n  --colorbar_width             Colorbar width (Default: 0.01)\n  --colorbar_height            Colorbar height (Default: 0.2)\n  --curve                      Plot curved style link (Default: OFF)\n  --dpi                        Figure DPI (Default: 300)\n\n[*] marker means the default value.\n</code></pre>"},{"location":"cli-docs/pgv-mummer/#examples","title":"Examples","text":""},{"location":"cli-docs/pgv-mummer/#example-1","title":"Example 1","text":"<p>Download example dataset:</p> <p>Download four Erwinia phage genbank files</p> <pre><code>pgv-download-dataset -n erwinia_phage\n</code></pre> <p>Run CLI workflow:</p> <pre><code>pgv-mummer --gbk_resources MT939486.gbk MT939487.gbk MT939488.gbk LT960552.gbk \\\n           -o mummer_example1 --tick_style axis --align_type left --feature_plotstyle arrow\n</code></pre> <p> </p> mummer_example1/result.png"},{"location":"cli-docs/pgv-mummer/#example-2","title":"Example 2","text":"<p>Download example dataset:</p> <p>Download four Erwinia phage genbank files</p> <pre><code>pgv-download-dataset -n erwinia_phage\n</code></pre> <p>Run CLI workflow:</p> <p>Target range is specified (e.g. file:100-1000)</p> <pre><code>pgv-mummer --gbk_resources MT939486.gbk:250000-358115 MT939487.gbk:250000-355376 MT939488.gbk:250000-356948 LT960552.gbk:270000-340000 \\\n           -o mummer_example2 --tick_style bar --feature_plotstyle arrow\n</code></pre> <p> </p> mummer_example2/result.png"},{"location":"cli-docs/pgv-mummer/#example-3","title":"Example 3","text":"<p>Download example dataset:</p> <p>Download six Enterobacteria phage genbank files</p> <pre><code>pgv-download-dataset -n enterobacteria_phage\n</code></pre> <p>Run CLI workflow:</p> <pre><code>pgv-mummer --gbk_resources NC_019724.gbk NC_024783.gbk NC_016566.gbk NC_013600.gbk NC_031081.gbk NC_028901.gbk \\\n           -o mummer_example3 --fig_track_height 0.7 --feature_linewidth 0.3 --tick_style bar --curve \\\n           --normal_link_color chocolate --inverted_link_color limegreen --feature_color skyblue\n</code></pre> <p> </p> mummer_example3/result.png"},{"location":"cli-docs/pgv-pmauve/","title":"pgv-pmauve CLI Document","text":"<p><code>pgv-pmauve</code> is one of the CLI workflows in pyGenomeViz for visualization of genome alignment results using progressiveMauve. It can be used to visualize commonly conserved regions between all genomes.</p> <p></p>"},{"location":"cli-docs/pgv-pmauve/#installation","title":"Installation","text":"<p>Additional installation of progressiveMauve is required.</p>"},{"location":"cli-docs/pgv-pmauve/#conda","title":"Conda","text":"<pre><code>conda install -c conda-forge -c bioconda pygenomeviz progressivemauve\n</code></pre>"},{"location":"cli-docs/pgv-pmauve/#pip-ubuntu","title":"Pip (Ubuntu)","text":"<pre><code>pip install pygenomeviz\n</code></pre> <p>In Ubuntu, progressiveMauve can be installed with apt command below.</p> <pre><code>sudo apt install progressivemauve\n</code></pre>"},{"location":"cli-docs/pgv-pmauve/#usage","title":"Usage","text":""},{"location":"cli-docs/pgv-pmauve/#basic-command","title":"Basic Command","text":"<pre><code>pgv-pmauve --seq_files seq1.gbk seq2.gbk seq3.gbk seq4.gbk -o pmauve_example\n</code></pre>"},{"location":"cli-docs/pgv-pmauve/#options","title":"Options","text":"<pre><code>General Options:\n  --seq_files IN [IN ...]  Input genome sequence files (Genbank or Fasta format)\n  -o OUT, --outdir OUT     Output directory\n  --refid                  Reference genome index (Default: 0)\n  --format  [ ...]         Output image format ('png'[*]|'jpg'|'svg'|'pdf'|`html`[*])\n  --reuse                  Reuse previous result if available\n  -v, --version            Print version information\n  -h, --help               Show this help message and exit\n\nFigure Appearence options:\n  --fig_width              Figure width (Default: 15)\n  --fig_track_height       Figure track height (Default: 1.0)\n  --feature_track_ratio    Feature track ratio (Default: 1.0)\n  --link_track_ratio       Link track ratio (Default: 5.0)\n  --tick_track_ratio       Tick track ratio (Default: 1.0)\n  --track_labelsize        Track label size (Default: 20)\n  --tick_labelsize         Tick label size (Default: 15)\n  --normal_link_color      Normal link color (Default: 'grey')\n  --inverted_link_color    Inverted link color (Default: 'tomato')\n  --align_type             Figure tracks align type ('left'|'center'[*]|'right')\n  --tick_style             Tick style ('bar'|'axis'|None[*])\n  --plotstyle              Block box plot style ('box'[*]|'bigbox')\n  --cmap                   Block box colormap (Default: 'hsv')\n  --curve                  Plot curved style link (Default: OFF)\n  --dpi                    Figure DPI (Default: 300)\n\n[*] marker means the default value.\n</code></pre> Colormap(--cmap) option <p>User can arbitrarily choose the visualization colormap from  the various colormap types in matplotlib. See Choosing Colormaps in Matplotlib for details.</p>"},{"location":"cli-docs/pgv-pmauve/#examples","title":"Examples","text":""},{"location":"cli-docs/pgv-pmauve/#example-1","title":"Example 1","text":"<p>Download example dataset:</p> <p>Download four E.coli genbank files</p> <pre><code>pgv-download-dataset -n escherichia_coli\n</code></pre> <p>Run CLI workflow:</p> <pre><code>pgv-pmauve --seq_files NC_000913.gbk NC_002695.gbk NC_011751.gbk NC_011750.gbk \\\n           -o pmauve_example1 --tick_style bar\n</code></pre> <p> </p> pmauve_example1/result.png"},{"location":"cli-docs/pgv-pmauve/#example-2","title":"Example 2","text":"<p>Download example dataset:</p> <p>Download six M.gallisepticum genbank files</p> <pre><code>pgv-download-dataset -n mycoplasma_gallisepticum\n</code></pre> <p>Run CLI workflow:</p> <pre><code>pgv-pmauve --seq_files NC_004829.gbk NC_017502.gbk NC_017503.gbk NC_018407.gbk NC_018408.gbk NC_018409.gbk \\\n           -o pmauve_example2 --fig_track_height 0.7 --align_type left --cmap viridis --tick_style axis --curve\n</code></pre> <p> </p> pmauve_example2/result.png"},{"location":"cli-docs/pgv-simpleplot/","title":"pgv-simpleplot CLI Document","text":"<p><code>pgv-simpleplot</code> is one of the CLI workflows in pyGenomeViz for simple genome visualization.</p> <p></p>"},{"location":"cli-docs/pgv-simpleplot/#usage","title":"Usage","text":""},{"location":"cli-docs/pgv-simpleplot/#basic-command","title":"Basic Command","text":"<pre><code>pgv-simpleplot --gbk_resources seq1.gbk seq2.gbk seq3.gbk seq4.gbk -o result.html\n</code></pre>"},{"location":"cli-docs/pgv-simpleplot/#options","title":"Options","text":"<pre><code>General Options:\n  --gbk_resources IN [IN ...]  Input genome genbank file resources\n                               User can optionally specify genome range and reverse complement.\n                               - Example1. Set 100 - 1000 range 'file:100-1000'\n                               - Example2. Set reverse complement 'file::-1'\n                               - Example3. Set 100 - 1000 range of reverse complement 'file:100-1000:-1'\n  -o OUT, --outfile OUT        Output file ('*.png'|'*.jpg'|'*.svg'|'*.pdf'|'*.html')\n  -v, --version                Print version information\n  -h, --help                   Show this help message and exit\n\nFigure Appearence Options:\n  --fig_width                  Figure width (Default: 15)\n  --fig_track_height           Figure track height (Default: 1.0)\n  --feature_track_ratio        Feature track ratio (Default: 1.0)\n  --space_track_ratio          Space (b/w feature) track ratio (Default: 2.0)\n  --tick_track_ratio           Tick track ratio (Default: 1.0)\n  --track_labelsize            Track label size (Default: 20)\n  --tick_labelsize             Tick label size (Default: 15)\n  --align_type                 Figure tracks align type ('left'[*]|'center'|'right')\n  --tick_style                 Tick style ('bar'|'axis'|None[*])\n  --feature_plotstyle          Feature plot style ('bigarrow'[*]|'arrow')\n  --arrow_shaft_ratio          Feature arrow shaft ratio (Default: 0.5)\n  --feature_color              Feature color (Default: 'orange')\n  --feature_linewidth          Feature edge line width (Default: 0.0)\n  --dpi                        Figure DPI (Default: 300)\n\n[*] marker means the default value.\n</code></pre>"},{"location":"cli-docs/pgv-simpleplot/#examples","title":"Examples","text":""},{"location":"cli-docs/pgv-simpleplot/#example-1","title":"Example 1","text":"<p>Download example dataset:</p> <p>Download four Enterobacteria phage genbank files</p> <pre><code>pgv-download-dataset -n enterobacteria_phage\n</code></pre> <p>Run CLI workflow:</p> <pre><code>pgv-simpleplot --gbk_resources NC_019724.gbk -o simpleplot_example1.png\n</code></pre> <p> </p> simpleplot_example1.png"},{"location":"cli-docs/pgv-simpleplot/#example-2","title":"Example 2","text":"<p>Download six Enterobacteria phage genbank files</p> <pre><code>pgv-download-dataset -n enterobacteria_phage\n</code></pre> <p>Run CLI workflow:</p> <pre><code>pgv-simpleplot --gbk_resources NC_019724.gbk NC_024783.gbk NC_016566.gbk NC_013600.gbk NC_031081.gbk NC_028901.gbk \\\n               -o simpleplot_example2.png --tick_style axis --feature_plotstyle arrow --fig_track_height 0.7\n</code></pre> <p> </p> simpleplot_example2.png"},{"location":"cli-docs/pgv-simpleplot/#example-3","title":"Example 3","text":"<p>Download example dataset:</p> <p>Download four Erwinia phage genbank files</p> <pre><code>pgv-download-dataset -n erwinia_phage\n</code></pre> <p>Run CLI workflow:</p> <p>Target range is specified (e.g. file:100-1000)</p> <pre><code>pgv-simpleplot --gbk_resources MT939486.gbk:250000-358115 MT939487.gbk:250000-355376 MT939488.gbk:250000-356948 LT960552.gbk:270000-340000 \\\n               -o simpleplot_example3.png --tick_style bar --feature_plotstyle arrow --feature_color skyblue\n</code></pre> <p> </p> simpleplot_example3.png"},{"location":"gui-docs/pgv-gui/","title":"pgv-gui Web Application Document","text":"<p><code>pgv-gui</code> command is used to launch the pyGenomeViz web application. It is developed with the streamlit web application framework, and users can easily visualize the genome data of Genbank files and their comparison results with GUI.</p> <p> Fig.pyGenomeViz web application example (Demo Page)</p>"},{"location":"gui-docs/pgv-gui/#installation","title":"Installation","text":"<p>Additional installation of streamlit is required. MUMmer and MMseqs are also required to enable the genome comparison functionality.</p>"},{"location":"gui-docs/pgv-gui/#conda","title":"Conda","text":"<pre><code>conda install -c conda-forge -c bioconda pygenomeviz streamlit mummer mmseqs2\n</code></pre>"},{"location":"gui-docs/pgv-gui/#pip","title":"Pip","text":"<pre><code>pip install pygenomeviz[gui]\n</code></pre> <p>In Ubuntu22.04, MUMmer and MMseqs can be installed with apt command below.</p> <pre><code>sudo apt install mummer mmseqs2\n</code></pre>"},{"location":"gui-docs/pgv-gui/#docker","title":"Docker","text":"<pre><code>docker run -it --rm -p 8501:8501 ghcr.io/moshi4/pygenomeviz:latest pgv-gui\n</code></pre>"},{"location":"gui-docs/pgv-gui/#usage","title":"Usage","text":"<p>The following command launches web application, which can be accessed at http://localhost:8501.</p> <pre><code>pgv-gui\n</code></pre> <p>By uploading the user's Genbank files in the browser, a visualization figure of the genome data is automatically displayed. By changing the value of each widget on the browser, user can adjust the appearance of the figure, change the genome comparison method, etc. interactively.</p>"}]}